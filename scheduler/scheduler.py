"""
–ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–æ–º –∑–∞–¥–∞—á
"""
import logging
from datetime import datetime, timedelta
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.interval import IntervalTrigger
from apscheduler.triggers.cron import CronTrigger
import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from database.database import get_db
from database.models import Reminder, Child, Feeding, Stool, Weight, Medication
from bot.bot import bot
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ParseMode
from config import LOG_LEVEL, GOOGLE_SHEETS_ENABLED

logger = logging.getLogger(__name__)
logging.basicConfig(level=getattr(logging, LOG_LEVEL))

# –°–æ–∑–¥–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
scheduler = AsyncIOScheduler()

async def check_reminders():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    try:
        db = next(get_db())
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
        now = datetime.now()
        
        # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è, –≤—Ä–µ–º—è –∫–æ—Ç–æ—Ä—ã—Ö –Ω–∞—Å—Ç—É–ø–∏–ª–æ
        reminders = db.query(Reminder).filter(
            Reminder.status == 'active',
            Reminder.reminder_time <= now
        ).all()
        
        for reminder in reminders:
            try:
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–±–µ–Ω–∫–µ
                child = db.query(Child).get(reminder.child_id)
                if not child:
                    logger.warning(f"–†–µ–±–µ–Ω–æ–∫ —Å ID {reminder.child_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è {reminder.id}")
                    continue
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                message = f"‚è∞ *–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ*\n\n{reminder.description}"
                
                # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
                keyboard = InlineKeyboardMarkup()
                keyboard.row(
                    InlineKeyboardButton("‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ", callback_data=f"reminder_complete_{reminder.id}"),
                    InlineKeyboardButton("‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data=f"reminder_skip_{reminder.id}")
                )
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
                await bot.send_message(
                    chat_id=int(os.environ.get('ADMIN_CHAT_ID', '0')),  # –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å ID —á–∞—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
                    text=message,
                    reply_markup=keyboard,
                    parse_mode='Markdown'
                )
                
                logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {reminder.description}")
                
                # –ï—Å–ª–∏ —ç—Ç–æ –æ–¥–Ω–æ–∫—Ä–∞—Ç–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ, –ø–æ–º–µ—á–∞–µ–º –µ–≥–æ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ
                if reminder.repeat_type == 'once':
                    reminder.status = 'sent'
                    db.commit()
                    
                # –ï—Å–ª–∏ —ç—Ç–æ –ø–æ–≤—Ç–æ—Ä—è—é—â–µ–µ—Å—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ, —Å–æ–∑–¥–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–µ
                else:
                    next_time = None
                    
                    if reminder.repeat_type == 'daily':
                        next_time = reminder.reminder_time + timedelta(days=reminder.repeat_interval)
                    elif reminder.repeat_type == 'weekly':
                        next_time = reminder.reminder_time + timedelta(weeks=reminder.repeat_interval)
                    elif reminder.repeat_type == 'monthly':
                        # –ü—Ä–æ—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è –º–µ—Å—è—Ü–µ–≤ (–Ω–µ —É—á–∏—Ç—ã–≤–∞–µ—Ç —Ä–∞–∑–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π)
                        next_month = reminder.reminder_time.month + reminder.repeat_interval
                        next_year = reminder.reminder_time.year + (next_month - 1) // 12
                        next_month = ((next_month - 1) % 12) + 1
                        
                        # –°–æ–∑–¥–∞–µ–º –¥–∞—Ç—É —Å–ª–µ–¥—É—é—â–µ–≥–æ –º–µ—Å—è—Ü–∞
                        next_time = reminder.reminder_time.replace(year=next_year, month=next_month)
                    
                    if next_time:
                        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
                        new_reminder = Reminder(
                            child_id=reminder.child_id,
                            description=reminder.description,
                            reminder_time=next_time,
                            status='active',
                            repeat_type=reminder.repeat_type,
                            repeat_interval=reminder.repeat_interval
                        )
                        db.add(new_reminder)
                        
                        # –ü–æ–º–µ—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ
                        reminder.status = 'sent'
                        
                        db.commit()
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è {reminder.id}: {e}")
                
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {e}")
    finally:
        db.close()

async def check_feeding_intervals():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ –º–µ–∂–¥—É –∫–æ—Ä–º–ª–µ–Ω–∏—è–º–∏"""
    try:
        db = next(get_db())
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
        now = datetime.now()
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∫–æ—Ä–º–ª–µ–Ω–∏–µ
        last_feeding = db.query(Feeding).order_by(Feeding.timestamp.desc()).first()
        
        if last_feeding:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—à–ª–æ –ª–∏ –±–æ–ª–µ–µ 3 —á–∞—Å–æ–≤ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∫–æ—Ä–º–ª–µ–Ω–∏—è
            time_since_last_feeding = now - last_feeding.timestamp
            
            if time_since_last_feeding > timedelta(hours=3):
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–±–µ–Ω–∫–µ
                child = db.query(Child).get(last_feeding.child_id)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∫–æ—Ä–º–ª–µ–Ω–∏–∏
                await bot.send_message(
                    chat_id=int(os.environ.get('ADMIN_CHAT_ID', '0')),
                    text=f"‚ö†Ô∏è *–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∫–æ—Ä–º–ª–µ–Ω–∏–∏*\n\n"
                         f"–ü—Ä–æ—à–ª–æ –±–æ–ª–µ–µ 3 —á–∞—Å–æ–≤ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∫–æ—Ä–º–ª–µ–Ω–∏—è {child.name if child else ''}.\n"
                         f"–ü–æ—Å–ª–µ–¥–Ω–µ–µ –∫–æ—Ä–º–ª–µ–Ω–∏–µ –±—ã–ª–æ –≤ {last_feeding.timestamp.strftime('%H:%M')}.",
                    parse_mode='Markdown'
                )
                
                logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∫–æ—Ä–º–ª–µ–Ω–∏–∏")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ –∫–æ—Ä–º–ª–µ–Ω–∏—è: {e}")
    finally:
        db.close()

async def generate_daily_report():
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
    try:
        db = next(get_db())
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
        today = datetime.now().date()
        yesterday = today - timedelta(days=1)
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –≤—á–µ—Ä–∞—à–Ω–∏–π –¥–µ–Ω—å
        feedings = db.query(Feeding).filter(
            Feeding.timestamp >= datetime.combine(yesterday, datetime.min.time()),
            Feeding.timestamp < datetime.combine(today, datetime.min.time())
        ).all()
        
        stools = db.query(Stool).filter(
            Stool.timestamp >= datetime.combine(yesterday, datetime.min.time()),
            Stool.timestamp < datetime.combine(today, datetime.min.time())
        ).all()
        
        weights = db.query(Weight).filter(
            Weight.timestamp >= datetime.combine(yesterday, datetime.min.time()),
            Weight.timestamp < datetime.combine(today, datetime.min.time())
        ).all()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        report = f"üìä *–û—Ç—á–µ—Ç –∑–∞ {yesterday.strftime('%d.%m.%Y')}*\n\n"
        
        # –ö–æ—Ä–º–ª–µ–Ω–∏—è
        report += f"üçº *–ö–æ—Ä–º–ª–µ–Ω–∏—è:* {len(feedings)}\n"
        if feedings:
            total_amount = sum(f.amount for f in feedings)
            report += f"–í—Å–µ–≥–æ: {total_amount} –º–ª\n"
            report += f"–°—Ä–µ–¥–Ω–µ–µ: {total_amount / len(feedings):.1f} –º–ª\n\n"
        else:
            report += "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n\n"
        
        # –°—Ç—É–ª
        report += f"üí© *–°—Ç—É–ª:* {len(stools)}\n"
        if stools:
            for stool in stools:
                report += f"- {stool.timestamp.strftime('%H:%M')}: {stool.description}\n"
            report += "\n"
        else:
            report += "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n\n"
        
        # –í–µ—Å
        report += f"‚öñÔ∏è *–í–µ—Å:*\n"
        if weights:
            for weight in weights:
                report += f"- {weight.timestamp.strftime('%H:%M')}: {weight.weight} –∫–≥\n"
            report += "\n"
        else:
            report += "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n\n"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç
        await bot.send_message(
            chat_id=int(os.environ.get('ADMIN_CHAT_ID', '0')),
            text=report,
            parse_mode='Markdown'
        )
        
        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞: {e}")
    finally:
        db.close()

async def sync_google_sheets():
    """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Å Google Sheets"""
    if not GOOGLE_SHEETS_ENABLED:
        return
        
    try:
        db = next(get_db())
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä Google Sheets
        from google_sheets.sheets import sheets_manager
        
        # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
        sheets_manager.sync_all_data(db)
        
        logger.info("–í—ã–ø–æ–ª–Ω–µ–Ω–∞ –ø–ª–∞–Ω–æ–≤–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å Google Sheets")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å Google Sheets: {e}")
    finally:
        db.close()

def start_scheduler():
    """–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∑–∞–¥–∞—á"""
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
    scheduler.add_job(check_reminders, IntervalTrigger(minutes=1))
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ –∫–æ—Ä–º–ª–µ–Ω–∏—è –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
    scheduler.add_job(check_feeding_intervals, IntervalTrigger(minutes=30))
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –≤ 9:00
    scheduler.add_job(generate_daily_report, CronTrigger(hour=9, minute=0))
    
    # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å Google Sheets –∫–∞–∂–¥—ã–π —á–∞—Å
    if GOOGLE_SHEETS_ENABLED:
        scheduler.add_job(sync_google_sheets, IntervalTrigger(hours=1))
    
    scheduler.start()
    logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω")

def stop_scheduler():
    """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∑–∞–¥–∞—á"""
    scheduler.shutdown()
    logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω") 