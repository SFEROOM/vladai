from aiogram import Bot, Dispatcher, types
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.types import ParseMode, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils import executor
import logging
import openai
from sqlalchemy.orm import Session
import sys
import os
import io
import tempfile
import json
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from database.database import get_db, SessionLocal
from database.models import Child, Reminder, Appointment, Feeding, Stool, Weight, Medication, Prescription, Note, ChatHistory, User
from config import TELEGRAM_BOT_TOKEN, OPENAI_API_KEY, LOG_LEVEL, GOOGLE_SHEETS_ENABLED, GOOGLE_SHEETS_SPREADSHEET_ID
import re
from datetime import datetime, timedelta
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage

# Configure logging
logging.basicConfig(level=getattr(logging, LOG_LEVEL))
logger = logging.getLogger(__name__)

# Initialize bot and dispatcher
bot = Bot(token=TELEGRAM_BOT_TOKEN, parse_mode=ParseMode.HTML)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)
dp.middleware.setup(LoggingMiddleware())

# Configure OpenAI
openai.api_key = OPENAI_API_KEY

# Import AI assistant
from ai.assistant import MedicalAIAssistant
from ai.reminder_parser import ReminderParser

# Initialize AI assistant
ai_assistant = MedicalAIAssistant(OPENAI_API_KEY)

# Initialize reminder parser
reminder_parser = ReminderParser(OPENAI_API_KEY)

# Define states
class FeedingState(StatesGroup):
    waiting_for_amount = State()
    waiting_for_food_type = State()

class StoolState(StatesGroup):
    waiting_for_description = State()

class WeightState(StatesGroup):
    waiting_for_weight = State()

class MedicationState(StatesGroup):
    waiting_for_name = State()
    waiting_for_dosage = State()

class PrescriptionState(StatesGroup):
    waiting_for_full_text = State()
    waiting_for_start_date = State()
    waiting_for_end_date = State()

class ChildRegistrationState(StatesGroup):
    waiting_for_name = State()
    waiting_for_birth_date = State()
    waiting_for_gender = State()

class ReminderState(StatesGroup):
    waiting_for_description = State()
    waiting_for_time = State()
    waiting_for_date = State()  # –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã
    waiting_for_repeat_type = State()
    waiting_for_repeat_interval = State()
    waiting_for_edit_field = State()
    waiting_for_new_description = State()
    waiting_for_new_time = State()
    waiting_for_new_date = State()  # –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã
    waiting_for_new_repeat_type = State()
    waiting_for_new_repeat_interval = State()

class NotesState(StatesGroup):
    waiting_for_title = State()
    waiting_for_content = State()
    waiting_for_edit_content = State()

async def save_user(user_data: types.User, db: Session):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        user = db.query(User).filter_by(telegram_id=user_data.id).first()
        
        if not user:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = User(
                telegram_id=user_data.id,
                username=user_data.username,
                first_name=user_data.first_name,
                last_name=user_data.last_name,
                is_active=1
            )
            db.add(user)
            logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_data.id} ({user_data.username})")
        else:
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            user.username = user_data.username
            user.first_name = user_data.first_name
            user.last_name = user_data.last_name
            user.updated_at = datetime.now()
            user.is_active = 1
            
        db.commit()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        db.rollback()

@dp.message_handler(commands=['start'])
async def start_cmd(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
    db: Session = next(get_db())
    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        await save_user(message.from_user, db)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–±–µ–Ω–æ–∫
        child = db.query(Child).first()
        if child:
            await show_main_menu(message)
        else:
            await message.reply(
                f"üëã –ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!\n\n"
                "–Ø - –≤–∞—à —Å–µ–º–µ–π–Ω—ã–π –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. "
                "–Ø –ø–æ–º–æ–≥—É –≤–∞–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∑–¥–æ—Ä–æ–≤—å–µ –≤–∞—à–µ–≥–æ —Ä–µ–±–µ–Ω–∫–∞.\n\n"
                "–î–ª—è –Ω–∞—á–∞–ª–∞ –¥–∞–≤–∞–π—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ä–µ–±–µ–Ω–∫–∞.\n"
                "–í–≤–µ–¥–∏—Ç–µ –∏–º—è —Ä–µ–±–µ–Ω–∫–∞:",
                reply_markup=types.ReplyKeyboardRemove()
            )
            await ChildRegistrationState.waiting_for_name.set()
    finally:
        db.close()

@dp.message_handler(commands=['help'])
async def send_help(message: types.Message):
    """–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º"""
    help_text = """
üìã *–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*

/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É
/menu - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/reminders - –ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –∞–Ω–∞–ª–∏–∑ —Ä–∞–∑–≤–∏—Ç–∏—è
/ai - –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—É
/reset - –°–±—Ä–æ—Å–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞ —Å AI
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

üî∏ *–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:*
‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∫–æ—Ä–º–ª–µ–Ω–∏–π
‚Ä¢ –£—á–µ—Ç –≤–µ—Å–∞ —Ä–µ–±–µ–Ω–∫–∞
‚Ä¢ –ó–∞–ø–∏—Å—å –æ —Å—Ç—É–ª–µ
‚Ä¢ –ö–æ–Ω—Ç—Ä–æ–ª—å –ø—Ä–∏–µ–º–∞ –ª–µ–∫–∞—Ä—Å—Ç–≤
‚Ä¢ –ì–∏–±–∫–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —Å –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è–º–∏
‚Ä¢ AI-–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ —Å –ø–∞–º—è—Ç—å—é –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
‚Ä¢ –ê–Ω–∞–ª–∏–∑ —Ä–∞–∑–≤–∏—Ç–∏—è —Ä–µ–±–µ–Ω–∫–∞

üîπ *–¢–µ–∫—Å—Ç–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
‚Ä¢ "—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "—Å–≤–æ–¥–∫–∞", "–∞–Ω–∞–ª–∏–∑", "—Ä–∞–∑–≤–∏—Ç–∏–µ" - –ü–æ–ª—É—á–∏—Ç—å —Å–≤–æ–¥–∫—É –æ —Ä–∞–∑–≤–∏—Ç–∏–∏ —Ä–µ–±–µ–Ω–∫–∞
‚Ä¢ "–Ω–∞–ø–æ–º–Ω–∏...", "–Ω–∞–ø–æ–º–∏–Ω–∞–π..." - –°–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∏–∑ —Ç–µ–∫—Å—Ç–∞

üî∏ *–ü—Ä–∏–º–µ—Ä—ã —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π:*
‚Ä¢ "–ù–∞–ø–æ–º–Ω–∏ –º–Ω–µ –ø—Ä–∏–Ω—è—Ç—å –ª–µ–∫–∞—Ä—Å—Ç–≤–æ –≤ 13:00"
‚Ä¢ "–ù–∞–ø–æ–º–∏–Ω–∞–π –º–Ω–µ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 9:00 –¥–µ–ª–∞—Ç—å –∑–∞—Ä—è–¥–∫—É"
‚Ä¢ "–ù–∞–ø–æ–º–∏–Ω–∞–π –º–Ω–µ –∫–∞–∂–¥—É—é –Ω–µ–¥–µ–ª—é –≤ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –ø–æ—Å–µ—Ç–∏—Ç—å –≤—Ä–∞—á–∞"

_–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é_
"""
    await message.reply(help_text, parse_mode=ParseMode.MARKDOWN)

# Handlers for child registration
@dp.message_handler(state=ChildRegistrationState.waiting_for_name)
async def process_child_name(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–º–µ–Ω–∏ —Ä–µ–±–µ–Ω–∫–∞"""
    await state.update_data(name=message.text)
    await message.reply("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è —Ä–µ–±–µ–Ω–∫–∞ (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì):")
    await ChildRegistrationState.waiting_for_birth_date.set()

@dp.message_handler(state=ChildRegistrationState.waiting_for_birth_date)
async def process_birth_date(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è"""
    try:
        birth_date = datetime.strptime(message.text, "%d.%m.%Y").date()
        await state.update_data(birth_date=birth_date)
        
        keyboard = InlineKeyboardMarkup()
        keyboard.add(
            InlineKeyboardButton("–ú–∞–ª—å—á–∏–∫", callback_data='gender_male'),
            InlineKeyboardButton("–î–µ–≤–æ—á–∫–∞", callback_data='gender_female')
        )
        await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª —Ä–µ–±–µ–Ω–∫–∞:", reply_markup=keyboard)
        await ChildRegistrationState.waiting_for_gender.set()
    except ValueError:
        await message.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì")

@dp.callback_query_handler(lambda c: c.data.startswith('gender_'), state=ChildRegistrationState.waiting_for_gender)
async def process_gender(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª–∞"""
    gender = '–ú–∞–ª—å—á–∏–∫' if callback_query.data == 'gender_male' else '–î–µ–≤–æ—á–∫–∞'
    data = await state.get_data()
    
    db: Session = next(get_db())
    try:
        child = Child(
            name=data['name'],
            birth_date=data['birth_date'],
            gender=gender
        )
        db.add(child)
        db.commit()
        
        await bot.send_message(
            callback_query.from_user.id,
            f"‚úÖ –†–µ–±–µ–Ω–æ–∫ {data['name']} —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!"
        )
        await show_main_menu(callback_query.message)
        await state.finish()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–µ–±–µ–Ω–∫–∞: {e}")
        await bot.send_message(
            callback_query.from_user.id,
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
        await state.finish()
    finally:
        db.close()

# Function to show reminders menu
async def show_reminders_menu(message: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏"""
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("üìù –í—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è", callback_data='reminders_list'),
        InlineKeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ", callback_data='reminder_create'),
        InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data='reminders_stats'),
        InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data='back_to_menu')
    )
    await message.reply("‚è∞ *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏*\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", 
                       reply_markup=keyboard, 
                       parse_mode=ParseMode.MARKDOWN)

# Function to show all reminders
async def show_reminders_list(callback_query: types.CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
    db: Session = next(get_db())
    try:
        child = db.query(Child).first()
        if not child:
            await bot.send_message(
                callback_query.from_user.id,
                "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–±–µ–Ω–∫–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ —Ä–µ–±–µ–Ω–∫–∞."
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        reminders = db.query(Reminder).filter(
            Reminder.child_id == child.id,
            Reminder.status == 'active'
        ).order_by(Reminder.reminder_time).all()
        
        if not reminders:
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
            keyboard = InlineKeyboardMarkup(row_width=1)
            keyboard.add(
                InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ", callback_data="reminder_create"),
                InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")
            )
            
            await bot.send_message(
                callback_query.from_user.id,
                "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.",
                reply_markup=keyboard
            )
            return
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏ –∫–Ω–æ–ø–∫–∞–º–∏ –¥–µ–π—Å—Ç–≤–∏–π
        keyboard = InlineKeyboardMarkup(row_width=2)
        
        for reminder in reminders:
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è
            time_str = reminder.reminder_time.strftime("%H:%M")
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
            if reminder.repeat_type == 'once':
                date_str = reminder.reminder_time.strftime("%d.%m.%Y")
                button_text = f"‚è∞ {time_str} {date_str} - {reminder.description}"
            else:
                if reminder.repeat_type == 'daily':
                    repeat_text = "–µ–∂–µ–¥–Ω–µ–≤–Ω–æ"
                elif reminder.repeat_type == 'weekly':
                    repeat_text = "–µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ"
                elif reminder.repeat_type == 'monthly':
                    repeat_text = "–µ–∂–µ–º–µ—Å—è—á–Ω–æ"
                elif reminder.repeat_type == 'hourly':
                    repeat_text = f"–∫–∞–∂–¥—ã–µ {reminder.repeat_interval} —á–∞—Å(–æ–≤)"
                else:
                    repeat_text = "–ø–æ–≤—Ç–æ—Ä"
                button_text = f"‚è∞ {time_str} ({repeat_text}) - {reminder.description}"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º
            keyboard.add(
                InlineKeyboardButton(
                    text=button_text,
                    callback_data=f"reminder_view_{reminder.id}"
                )
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è —ç—Ç–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
            keyboard.row(
                InlineKeyboardButton("‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ", callback_data=f"reminder_complete_{reminder.id}"),
                InlineKeyboardButton("‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data=f"reminder_skip_{reminder.id}")
            )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        keyboard.add(
            InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ", callback_data="reminder_create"),
            InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")
        )
        
        await bot.send_message(
            callback_query.from_user.id,
            "üìã *–°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π*\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–ª–∏ –æ—Ç–º–µ—Ç—å—Ç–µ –µ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ/–ø—Ä–æ–ø—É—Å–∫:",
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=keyboard
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {e}")
        await bot.send_message(
            callback_query.from_user.id,
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"
        )
    finally:
        db.close()

# Function to view a specific reminder
@dp.callback_query_handler(lambda c: c.data and c.data.startswith('reminder_view_'))
async def view_reminder(callback_query: types.CallbackQuery):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
    await bot.answer_callback_query(callback_query.id)
    
    # –ü–æ–ª—É—á–∞–µ–º ID –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏–∑ callback_data
    reminder_id = int(callback_query.data.split('_')[2])
    
    db: Session = next(get_db())
    try:
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
        reminder = db.query(Reminder).get(reminder_id)
        if not reminder:
            await bot.send_message(
                callback_query.from_user.id,
                "‚ùå –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
            )
            return
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–∏
        time_str = reminder.reminder_time.strftime("%H:%M")
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
        if reminder.repeat_type == 'once':
            date_str = reminder.reminder_time.strftime("%d.%m.%Y")
        else:
            date_str = "–ü–æ–≤—Ç–æ—Ä—è—é—â–µ–µ—Å—è"
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ
        if reminder.repeat_type == 'once':
            repeat_str = "–û–¥–Ω–æ–∫—Ä–∞—Ç–Ω–æ"
        elif reminder.repeat_type == 'daily':
            repeat_str = "–ï–∂–µ–¥–Ω–µ–≤–Ω–æ"
        elif reminder.repeat_type == 'weekly':
            repeat_str = "–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ"
        elif reminder.repeat_type == 'monthly':
            repeat_str = "–ï–∂–µ–º–µ—Å—è—á–Ω–æ"
        elif reminder.repeat_type == 'hourly':
            repeat_str = f"–ö–∞–∂–¥—ã–µ {reminder.repeat_interval} —á–∞—Å(–æ–≤)"
        elif reminder.repeat_type == 'custom':
            repeat_str = f"–ö–∞–∂–¥—ã–µ {reminder.repeat_interval} –¥–Ω–µ–π"
        else:
            repeat_str = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
        keyboard = InlineKeyboardMarkup(row_width=2)
        keyboard.add(
            InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"reminder_edit_{reminder.id}"),
            InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=f"reminder_delete_{reminder.id}")
        )
        keyboard.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="reminders_list"))
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–∏
        await bot.send_message(
            callback_query.from_user.id,
            f"‚è∞ *–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ*\n\n"
            f"üìù *–û–ø–∏—Å–∞–Ω–∏–µ:* {reminder.description}\n"
            f"‚è∞ *–í—Ä–µ–º—è:* {time_str}\n"
            f"üìÖ *–î–∞—Ç–∞:* {date_str}\n"
            f"üîÑ *–ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ:* {repeat_str}",
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=keyboard
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")
        await bot.send_message(
            callback_query.from_user.id,
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"
        )
    finally:
        db.close()

# Function to handle callback queries for reminders menu
@dp.callback_query_handler(lambda c: c.data == 'reminders_menu')
async def process_reminders_menu_callback(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –º–µ–Ω—é –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
    await bot.answer_callback_query(callback_query.id)
    await show_reminders_menu(callback_query.message)

# Function to handle callback for reminders list
@dp.callback_query_handler(lambda c: c.data == 'reminders_list')
async def process_reminders_list_callback(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–ø–∏—Å–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
    await bot.answer_callback_query(callback_query.id)
    await show_reminders_list(callback_query)

# Function to handle callback for back to main menu
@dp.callback_query_handler(lambda c: c.data == 'back_to_menu')
async def process_back_to_menu(callback_query: types.CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await bot.answer_callback_query(callback_query.id)
    await show_main_menu(callback_query.message)

# Add a command to show reminders
@dp.message_handler(commands=['reminders'])
async def reminders_command(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–∫–∞–∑–∞ –º–µ–Ω—é –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
    await show_reminders_menu(message)

# Add a command to show reminders
@dp.message_handler(commands=['reminders'])
async def reminders_command(message: types.Message):
    await show_reminders(message)

# Function to show main menu with options
async def show_main_menu(message: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("üçº –ö–æ—Ä–º–ª–µ–Ω–∏–µ", callback_data='feeding'),
        InlineKeyboardButton("‚öñÔ∏è –í–µ—Å", callback_data='weight'),
        InlineKeyboardButton("üí© –°—Ç—É–ª", callback_data='stool'),
        InlineKeyboardButton("üìù –ù–∞–∑–Ω–∞—á–µ–Ω–∏—è", callback_data='prescriptions'),
        InlineKeyboardButton("‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è", callback_data='reminders_menu'),
        InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data='stats'),
        InlineKeyboardButton("üìã –ó–∞–º–µ—Ç–∫–∏", callback_data='notes'),
        InlineKeyboardButton("üìë –¢–∞–±–ª–∏—Ü–∞", callback_data='spreadsheet'),
        InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data='settings')
    )
    await message.reply("üè• *–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é*\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", 
                       reply_markup=keyboard, 
                       parse_mode=ParseMode.MARKDOWN)

# Function to handle callback queries for main menu
@dp.callback_query_handler(lambda c: c.data in ['feeding', 'stool', 'weight', 'reminders_menu', 'stats', 'prescriptions', 'spreadsheet', 'settings', 'notes'])
async def process_main_menu(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    action = callback_query.data
    db: Session = next(get_db())
    child = db.query(Child).first()
    
    if action == 'reminders_menu':
        await bot.answer_callback_query(callback_query.id)
        await show_reminders_menu(callback_query.message)
        return
        
    if action == 'stats':
        await bot.answer_callback_query(callback_query.id)
        await bot.send_message(
            callback_query.from_user.id,
            "üîÑ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –¥–∞–Ω–Ω—ã–µ –æ —Ä–∞–∑–≤–∏—Ç–∏–∏ —Ä–µ–±–µ–Ω–∫–∞..."
        )
        try:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–≤–æ–¥–∫—É –æ —Ä–∞–∑–≤–∏—Ç–∏–∏ —Å –ø–æ–º–æ—â—å—é –ò–ò
            summary = ai_assistant.generate_development_summary(db)
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            response = f"üìä *–°–≤–æ–¥–∫–∞ –æ —Ä–∞–∑–≤–∏—Ç–∏–∏ —Ä–µ–±–µ–Ω–∫–∞*\n\n{summary}"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é
            keyboard = InlineKeyboardMarkup()
            keyboard.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data='back_to_menu'))
            
            await bot.send_message(
                callback_query.from_user.id,
                response,
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=keyboard
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–≤–æ–¥–∫–∏: {e}")
            await bot.send_message(
                callback_query.from_user.id,
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
        finally:
            db.close()
        return
    
    if action == 'notes':
        await bot.answer_callback_query(callback_query.id)
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–º–µ—Ç–æ–∫
            notes = db.query(Note).filter(Note.child_id == child.id).order_by(Note.timestamp.desc()).all()
            
            if not notes:
                # –°–æ–∑–¥–∞–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
                keyboard = InlineKeyboardMarkup(row_width=1)
                keyboard.add(
                    InlineKeyboardButton("üìù –î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É", callback_data="add_note"),
                    InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")
                )
                
                await bot.send_message(
                    callback_query.from_user.id,
                    "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∑–∞–º–µ—Ç–æ–∫.",
                    reply_markup=keyboard
                )
                return
            
            # –°–æ–∑–¥–∞–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Å–ø–∏—Å–∫–∞ –∑–∞–º–µ—Ç–æ–∫
            keyboard = InlineKeyboardMarkup(row_width=1)
            for note in notes:
                date_str = note.timestamp.strftime("%d.%m.%Y, %H:%M")
                keyboard.add(InlineKeyboardButton(
                    text=f"{note.title} ({date_str})",
                    callback_data=f"note_{note.id}"
                ))
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
            keyboard.add(
                InlineKeyboardButton("üìù –î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É", callback_data="add_note"),
                InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")
            )
            
            await bot.send_message(
                callback_query.from_user.id,
                "–°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –∑–∞–º–µ—Ç–æ–∫:",
                reply_markup=keyboard
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –∑–∞–º–µ—Ç–æ–∫: {e}")
            await bot.send_message(
                callback_query.from_user.id,
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–º–µ—Ç–æ–∫."
            )
        finally:
            db.close()
        return
        
    if action == 'feeding':
        await bot.answer_callback_query(callback_query.id)
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –∫–æ—Ä–º–ª–µ–Ω–∏–π
        last_feedings = db.query(Feeding).filter_by(child_id=child.id).order_by(Feeding.timestamp.desc()).limit(7).all()
        
        if last_feedings:
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ—Ä–º–ª–µ–Ω–∏–π
            feedings_text = "üçº *–ü–æ—Å–ª–µ–¥–Ω–∏–µ 7 –∫–æ—Ä–º–ª–µ–Ω–∏–π:*\n\n"
            for feeding in last_feedings:
                date_str = feeding.timestamp.strftime("%d.%m.%Y, %H:%M")
                food_type_emoji = "ü§±" if feeding.food_type == "–ì—Ä—É–¥–Ω–æ–µ –º–æ–ª–æ–∫–æ" else "üçº" if feeding.food_type == "–°–º–µ—Å—å" else "ü•Ñ"
                feedings_text += f"{food_type_emoji} {date_str} - {feeding.amount} –º–ª ({feeding.food_type})\n"
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º AI —Å–≤–æ–¥–∫—É
            await bot.send_message(
                callback_query.from_user.id,
                feedings_text,
                parse_mode=ParseMode.MARKDOWN
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–≤–æ–¥–∫–∏
            await bot.send_message(
                callback_query.from_user.id,
                "ü§ñ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –¥–∞–Ω–Ω—ã–µ –æ –∫–æ—Ä–º–ª–µ–Ω–∏—è—Ö..."
            )
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º AI —Å–≤–æ–¥–∫—É –ø–æ –∫–æ—Ä–º–ª–µ–Ω–∏—è–º
            feeding_summary = ai_assistant.generate_feeding_summary(db)
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            keyboard = InlineKeyboardMarkup(row_width=2)
            keyboard.add(
                InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–æ—Ä–º–ª–µ–Ω–∏–µ", callback_data='add_feeding'),
                InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data='feeding_stats'),
                InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data='back_to_menu')
            )
            
            await bot.send_message(
                callback_query.from_user.id,
                f"üìä *AI –ê–Ω–∞–ª–∏–∑ –∫–æ—Ä–º–ª–µ–Ω–∏–π:*\n\n{feeding_summary}",
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=keyboard
            )
        else:
            # –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –∫–æ—Ä–º–ª–µ–Ω–∏—è—Ö
            keyboard = InlineKeyboardMarkup(row_width=1)
            keyboard.add(
                InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–≤–æ–µ –∫–æ—Ä–º–ª–µ–Ω–∏–µ", callback_data='add_feeding'),
                InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data='back_to_menu')
            )
            
            await bot.send_message(
                callback_query.from_user.id,
                "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –æ –∫–æ—Ä–º–ª–µ–Ω–∏—è—Ö.",
                reply_markup=keyboard
            )
        
        db.close()
        return

    elif action == 'stool':
        await bot.answer_callback_query(callback_query.id)
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –∑–∞–ø–∏—Å–µ–π –æ —Å—Ç—É–ª–µ
        last_stools = db.query(Stool).filter_by(child_id=child.id).order_by(Stool.timestamp.desc()).limit(7).all()
        
        if last_stools:
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π –æ —Å—Ç—É–ª–µ
            stools_text = "üí© *–ü–æ—Å–ª–µ–¥–Ω–∏–µ 7 –∑–∞–ø–∏—Å–µ–π –æ —Å—Ç—É–ª–µ:*\n\n"
            for stool in last_stools:
                date_str = stool.timestamp.strftime("%d.%m.%Y, %H:%M")
                color_text = f" ({stool.color})" if stool.color else ""
                stools_text += f"üìù {date_str} - {stool.description}{color_text}\n"
            
            await bot.send_message(
                callback_query.from_user.id,
                stools_text,
                parse_mode=ParseMode.MARKDOWN
            )
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º AI —Å–≤–æ–¥–∫—É
            await bot.send_message(
                callback_query.from_user.id,
                "ü§ñ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –¥–∞–Ω–Ω—ã–µ –æ –ø–∏—â–µ–≤–∞—Ä–µ–Ω–∏–∏..."
            )
            
            stool_summary = ai_assistant.generate_stool_summary(db)
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            keyboard = InlineKeyboardMarkup(row_width=2)
            keyboard.add(
                InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å", callback_data='add_stool'),
                InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data='back_to_menu')
            )
            
            await bot.send_message(
                callback_query.from_user.id,
                f"üìä *AI –ê–Ω–∞–ª–∏–∑ –ø–∏—â–µ–≤–∞—Ä–µ–Ω–∏—è:*\n\n{stool_summary}",
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=keyboard
            )
        else:
            # –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Å—Ç—É–ª–µ
            keyboard = InlineKeyboardMarkup(row_width=1)
            keyboard.add(
                InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–≤—É—é –∑–∞–ø–∏—Å—å", callback_data='add_stool'),
                InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data='back_to_menu')
            )
            
            await bot.send_message(
                callback_query.from_user.id,
                "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –æ —Å—Ç—É–ª–µ —Ä–µ–±–µ–Ω–∫–∞.",
                reply_markup=keyboard
            )
        
        db.close()
        return

    elif action == 'weight':
        await bot.answer_callback_query(callback_query.id)
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –∑–∞–ø–∏—Å–µ–π –æ –≤–µ—Å–µ
        last_weights = db.query(Weight).filter_by(child_id=child.id).order_by(Weight.timestamp.desc()).limit(7).all()
        
        if last_weights:
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∏–∑–º–µ—Ä–µ–Ω–∏–π –≤–µ—Å–∞
            weights_text = "‚öñÔ∏è *–ü–æ—Å–ª–µ–¥–Ω–∏–µ 7 –∏–∑–º–µ—Ä–µ–Ω–∏–π –≤–µ—Å–∞:*\n\n"
            for weight in last_weights:
                date_str = weight.timestamp.strftime("%d.%m.%Y, %H:%M")
                weights_text += f"üìä {date_str} - {weight.weight} –∫–≥\n"
            
            # –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–∏—Ä–æ—Å—Ç –∑–∞ –Ω–µ–¥–µ–ª—é
            if len(last_weights) > 1:
                current_weight = last_weights[0].weight
                week_ago_weight = last_weights[-1].weight
                week_gain = current_weight - week_ago_weight
                
                # –ü—Ä–∏—Ä–æ—Å—Ç –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—É—Ç–∫–∏
                day_gain = 0
                yesterday = datetime.now() - timedelta(days=1)
                for i in range(1, len(last_weights)):
                    if last_weights[i].timestamp >= yesterday:
                        day_gain = current_weight - last_weights[i].weight
                        break
                
                weights_text += f"\nüìà *–ò–∑–º–µ–Ω–µ–Ω–∏—è:*\n"
                weights_text += f"‚Ä¢ –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—É—Ç–∫–∏: {day_gain:+.2f} –∫–≥\n"
                weights_text += f"‚Ä¢ –ó–∞ –Ω–µ–¥–µ–ª—é: {week_gain:+.2f} –∫–≥\n"
            
            await bot.send_message(
                callback_query.from_user.id,
                weights_text,
                parse_mode=ParseMode.MARKDOWN
            )
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º AI —Å–≤–æ–¥–∫—É
            await bot.send_message(
                callback_query.from_user.id,
                "ü§ñ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –¥–∏–Ω–∞–º–∏–∫—É –≤–µ—Å–∞..."
            )
            
            weight_summary = ai_assistant.generate_weight_summary(db)
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            keyboard = InlineKeyboardMarkup(row_width=2)
            keyboard.add(
                InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤–µ—Å", callback_data='add_weight'),
                InlineKeyboardButton("üìä –ì—Ä–∞—Ñ–∏–∫", callback_data='weight_chart'),
                InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data='back_to_menu')
            )
            
            await bot.send_message(
                callback_query.from_user.id,
                f"üìä *AI –ê–Ω–∞–ª–∏–∑ –≤–µ—Å–∞:*\n\n{weight_summary}",
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=keyboard
            )
        else:
            # –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –≤–µ—Å–µ
            keyboard = InlineKeyboardMarkup(row_width=1)
            keyboard.add(
                InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–≤–æ–µ –∏–∑–º–µ—Ä–µ–Ω–∏–µ", callback_data='add_weight'),
                InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data='back_to_menu')
            )
            
            await bot.send_message(
                callback_query.from_user.id,
                "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –æ –≤–µ—Å–µ —Ä–µ–±–µ–Ω–∫–∞.",
                reply_markup=keyboard
            )
        
        db.close()
        return



    elif action == 'prescriptions':
        await bot.answer_callback_query(callback_query.id)
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π
            prescriptions = db.query(Prescription).filter(
                Prescription.child_id == child.id,
                Prescription.is_active == 1
            ).order_by(Prescription.start_date.desc()).all()
            
            if not prescriptions:
                # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
                keyboard = InlineKeyboardMarkup(row_width=2)
                keyboard.add(
                    InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ", callback_data='add_prescription'),
                    InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data='back_to_menu')
                )
                
                await bot.send_message(
                    callback_query.from_user.id,
                    "üìã *–ù–∞–∑–Ω–∞—á–µ–Ω–∏—è –≤—Ä–∞—á–µ–π*\n\n"
                    "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π.",
                    parse_mode=ParseMode.MARKDOWN,
                    reply_markup=keyboard
                )
                return
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π
            message_text = "üìã *–ê–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –≤—Ä–∞—á–µ–π:*\n\n"
            
            for i, prescription in enumerate(prescriptions, 1):
                end_date_text = f"–¥–æ {prescription.end_date.strftime('%d.%m.%Y')}" if prescription.end_date else "–±–µ—Å—Å—Ä–æ—á–Ω–æ"
                doctor_text = f"–í—Ä–∞—á: {prescription.doctor_name}\n" if prescription.doctor_name else ""
                
                # –ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ–≥–æ
                if prescription.full_text:
                    message_text += (
                        f"{i}. *{prescription.medication_name}*\n"
                        f"üìÑ *–ü–æ–ª–Ω–æ–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ:*\n{prescription.full_text}\n"
                        f"üìÖ –ü–µ—Ä–∏–æ–¥: —Å {prescription.start_date.strftime('%d.%m.%Y')} {end_date_text}\n\n"
                    )
                else:
                    # –ò–Ω–∞—á–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                    message_text += (
                        f"{i}. *{prescription.medication_name}*\n"
                        f"üíä –î–æ–∑–∏—Ä–æ–≤–∫–∞: {prescription.dosage}\n"
                        f"üïí –ß–∞—Å—Ç–æ—Ç–∞: {prescription.frequency}\n"
                        f"{doctor_text}"
                        f"üìÖ –ü–µ—Ä–∏–æ–¥: —Å {prescription.start_date.strftime('%d.%m.%Y')} {end_date_text}\n"
                    )
                    
                    if prescription.notes:
                        message_text += f"üìù –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: {prescription.notes}\n"
                
                message_text += "\n"
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
            keyboard = InlineKeyboardMarkup(row_width=2)
            keyboard.add(
                InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ", callback_data='add_prescription'),
                InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data='edit_prescriptions'),
                InlineKeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è", callback_data='create_all_prescription_reminders'),
                InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data='back_to_menu')
            )
            
            await bot.send_message(
                callback_query.from_user.id,
                message_text,
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=keyboard
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π: {e}")
            await bot.send_message(
                callback_query.from_user.id,
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π."
            )
        finally:
            db.close()
        return

    elif action == 'spreadsheet':
        await bot.answer_callback_query(callback_query.id)
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω–∞ –ª–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Google Sheets
            if not GOOGLE_SHEETS_ENABLED:
                # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                keyboard = InlineKeyboardMarkup(row_width=1)
                keyboard.add(
                    InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data='back_to_menu')
                )
                
                await bot.send_message(
                    callback_query.from_user.id,
                    "üìë *Google Sheets –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è*\n\n"
                    "–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Google Sheets –æ—Ç–∫–ª—é—á–µ–Ω–∞. –ß—Ç–æ–±—ã –≤–∫–ª—é—á–∏—Ç—å –µ—ë:\n\n"
                    "1. –°–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ–µ–∫—Ç –≤ Google Cloud Console\n"
                    "2. –í–∫–ª—é—á–∏—Ç–µ Google Sheets API\n"
                    "3. –°–æ–∑–¥–∞–π—Ç–µ —Å–µ—Ä–≤–∏—Å–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç –∏ —Å–∫–∞—á–∞–π—Ç–µ –∫–ª—é—á –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON\n"
                    "4. –ü–æ–º–µ—Å—Ç–∏—Ç–µ —Ñ–∞–π–ª –∫–ª—é—á–∞ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —Å –±–æ—Ç–æ–º\n"
                    "5. –°–æ–∑–¥–∞–π—Ç–µ —Ç–∞–±–ª–∏—Ü—É Google Sheets –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ –¥–æ—Å—Ç—É–ø —Å–µ—Ä–≤–∏—Å–Ω–æ–º—É –∞–∫–∫–∞—É–Ω—Ç—É\n"
                    "6. –û–±–Ω–æ–≤–∏—Ç–µ —Ñ–∞–π–ª .env —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏:\n"
                    "```\n"
                    "GOOGLE_SHEETS_CREDENTIALS=credentials.json\n"
                    "GOOGLE_SHEETS_SPREADSHEET_ID=your_spreadsheet_id\n"
                    "GOOGLE_SHEETS_ENABLED=true\n"
                    "```",
                    parse_mode=ParseMode.MARKDOWN,
                    reply_markup=keyboard
                )
                return
            
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä Google Sheets –∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
            from google_sheets.sheets import sheets_manager
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
            progress_msg = await bot.send_message(
                callback_query.from_user.id,
                "üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Å Google Sheets..."
            )
            
            # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
            success = sheets_manager.sync_all_data(db)
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
            keyboard = InlineKeyboardMarkup(row_width=2)
            keyboard.add(
                InlineKeyboardButton("üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å", callback_data='spreadsheet'),
                InlineKeyboardButton("üîó –û—Ç–∫—Ä—ã—Ç—å —Ç–∞–±–ª–∏—Ü—É", url=f"https://docs.google.com/spreadsheets/d/{GOOGLE_SHEETS_SPREADSHEET_ID}")
            )
            keyboard.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data='back_to_menu'))
            
            if success:
                await bot.edit_message_text(
                    "‚úÖ *–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã —Å Google Sheets*\n\n"
                    "–í—Å–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —Ç–µ–ø–µ—Ä—å –¥–æ—Å—Ç—É–ø–Ω—ã –≤ —Ç–∞–±–ª–∏—Ü–µ Google Sheets.\n"
                    "–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–∫—Ä—ã—Ç—å —Ç–∞–±–ª–∏—Ü—É, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
                    chat_id=callback_query.from_user.id,
                    message_id=progress_msg.message_id,
                    parse_mode=ParseMode.MARKDOWN,
                    reply_markup=keyboard
                )
            else:
                await bot.edit_message_text(
                    "‚ùå *–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å Google Sheets*\n\n"
                    "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ —Å Google Sheets.\n"
                    "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                    chat_id=callback_query.from_user.id,
                    message_id=progress_msg.message_id,
                    parse_mode=ParseMode.MARKDOWN,
                    reply_markup=keyboard
                )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å Google Sheets: {e}")
            await bot.send_message(
                callback_query.from_user.id,
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å Google Sheets."
            )
        finally:
            db.close()
        return

    elif action == 'settings':
        await bot.answer_callback_query(callback_query.id)
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
        keyboard = InlineKeyboardMarkup(row_width=1)
        keyboard.add(
            InlineKeyboardButton("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ä–µ–±–µ–Ω–∫–∞", callback_data='clear_child_data'),
            InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data='back_to_menu')
        )
        
        await bot.send_message(
            callback_query.from_user.id,
            "‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏*\n\n"
            "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.\n"
            "‚ö†Ô∏è –ë—É–¥—å—Ç–µ –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã —Å –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏ —É–¥–∞–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö!",
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=keyboard
        )
        return

# Add a command to show the main menu
@dp.message_handler(commands=['menu'])
async def menu_command(message: types.Message):
    await show_main_menu(message)

@dp.message_handler(commands=['stats'])
async def stats_command(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    db: Session = next(get_db())
    try:
        await message.reply("üîÑ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –¥–∞–Ω–Ω—ã–µ –æ —Ä–∞–∑–≤–∏—Ç–∏–∏ —Ä–µ–±–µ–Ω–∫–∞...")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–≤–æ–¥–∫—É –æ —Ä–∞–∑–≤–∏—Ç–∏–∏ —Å –ø–æ–º–æ—â—å—é –ò–ò
        summary = ai_assistant.generate_development_summary(db)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        response = f"üìä *–°–≤–æ–¥–∫–∞ –æ —Ä–∞–∑–≤–∏—Ç–∏–∏ —Ä–µ–±–µ–Ω–∫–∞*\n\n{summary}"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é
        keyboard = InlineKeyboardMarkup()
        keyboard.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data='back_to_menu'))
        
        await message.reply(response, parse_mode=ParseMode.MARKDOWN, reply_markup=keyboard)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–≤–æ–¥–∫–∏: {e}")
        await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    finally:
        db.close()

@dp.callback_query_handler(lambda c: c.data == 'feeding')
async def process_feeding(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    db: Session = next(get_db())
    child = db.query(Child).first()
    last_feeding = db.query(Feeding).order_by(Feeding.timestamp.desc()).first()
    if last_feeding:
        last_feeding_info = f"–ü–æ—Å–ª–µ–¥–Ω–µ–µ –∫–æ—Ä–º–ª–µ–Ω–∏–µ: {last_feeding.amount} {last_feeding.food_type} –≤ {last_feeding.timestamp}"
    else:
        last_feeding_info = "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –∫–æ—Ä–º–ª–µ–Ω–∏—è—Ö."
    await bot.send_message(callback_query.from_user.id, last_feeding_info)
    await bot.send_message(callback_query.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–ª–æ–∫–∞ –≤ –≥—Ä–∞–º–º–∞—Ö:")
    await FeedingState.waiting_for_amount.set()

@dp.message_handler(state=FeedingState.waiting_for_amount, content_types=types.ContentType.TEXT)
async def handle_feeding_amount(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–æ—Ä–º–ª–µ–Ω–∏—è"""
    try:
        amount = float(message.text.strip())
        await state.update_data(amount=amount)
        
        keyboard = InlineKeyboardMarkup()
        keyboard.add(
            InlineKeyboardButton("–ì—Ä—É–¥–Ω–æ–µ –º–æ–ª–æ–∫–æ", callback_data='food_breast_milk'),
            InlineKeyboardButton("–°–º–µ—Å—å", callback_data='food_formula'),
            InlineKeyboardButton("–ü—Ä–∏–∫–æ—Ä–º", callback_data='food_solid')
        )
        await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–∏—Ç–∞–Ω–∏—è:", reply_markup=keyboard)
        await FeedingState.waiting_for_food_type.set()
    except ValueError:
        await message.reply("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ –≥—Ä–∞–º–º–∞—Ö.")

@dp.callback_query_handler(lambda c: c.data.startswith('food_'), state=FeedingState.waiting_for_food_type)
async def handle_food_type(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∏–ø–∞ –ø–∏—Ç–∞–Ω–∏—è"""
    food_types = {
        'food_breast_milk': '–ì—Ä—É–¥–Ω–æ–µ –º–æ–ª–æ–∫–æ',
        'food_formula': '–°–º–µ—Å—å',
        'food_solid': '–ü—Ä–∏–∫–æ—Ä–º'
    }
    
    food_type = food_types.get(callback_query.data, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
    data = await state.get_data()
    
    db: Session = next(get_db())
    try:
        child = db.query(Child).first()
        feeding = Feeding(
            child_id=child.id, 
            amount=data['amount'], 
            food_type=food_type,
            timestamp=datetime.now()
        )
        db.add(feeding)
        db.commit()
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
        date_str = feeding.timestamp.strftime("%d.%m.%Y, %H:%M")
        
        await bot.send_message(
            callback_query.from_user.id,
            f"‚úÖ –ö–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∞–Ω–æ: {data['amount']} –º–ª {food_type.lower()}\n"
            f"üìÖ –í—Ä–µ–º—è: {date_str}"
        )
        await show_main_menu(callback_query.message)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–æ—Ä–º–ª–µ–Ω–∏—è: {e}")
        await bot.send_message(
            callback_query.from_user.id,
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö"
        )
    finally:
        db.close()
        await state.finish()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å—Ç—É–ª–∞
@dp.message_handler(state=StoolState.waiting_for_description)
async def handle_stool_description(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è —Å—Ç—É–ª–∞"""
    db: Session = next(get_db())
    try:
        child = db.query(Child).first()
        
        # –ü—ã—Ç–∞–µ–º—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ü–≤–µ—Ç –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è
        description = message.text.strip()
        color = None
        
        # –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ü–≤–µ—Ç–∞
        color_keywords = {
            '—á–µ—Ä–Ω—ã–π': '—á–µ—Ä–Ω—ã–π',
            '—á–µ—Ä–Ω': '—á–µ—Ä–Ω—ã–π',
            '—Ç–µ–º–Ω—ã–π': '—Ç–µ–º–Ω—ã–π',
            '–∫–æ—Ä–∏—á–Ω–µ–≤—ã–π': '–∫–æ—Ä–∏—á–Ω–µ–≤—ã–π',
            '–∫–æ—Ä–∏—á': '–∫–æ—Ä–∏—á–Ω–µ–≤—ã–π',
            '–∂–µ–ª—Ç—ã–π': '–∂–µ–ª—Ç—ã–π',
            '–∂–µ–ª—Ç': '–∂–µ–ª—Ç—ã–π',
            '–∑–µ–ª–µ–Ω—ã–π': '–∑–µ–ª–µ–Ω—ã–π',
            '–∑–µ–ª–µ–Ω': '–∑–µ–ª–µ–Ω—ã–π',
            '–∫—Ä–∞—Å–Ω—ã–π': '–∫—Ä–∞—Å–Ω—ã–π',
            '–∫—Ä–∞—Å–Ω': '–∫—Ä–∞—Å–Ω—ã–π',
            '–±–µ–ª—ã–π': '–±–µ–ª—ã–π',
            '–±–µ–ª': '–±–µ–ª—ã–π',
        }
        
        description_lower = description.lower()
        for keyword, color_value in color_keywords.items():
            if keyword in description_lower:
                color = color_value
                break
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ —Å—Ç—É–ª–µ
        stool = Stool(
            child_id=child.id,
            description=description,
            color=color,  # –ú–æ–∂–µ—Ç –±—ã—Ç—å None
            timestamp=datetime.now()
        )
        db.add(stool)
        db.commit()
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
        date_str = stool.timestamp.strftime("%d.%m.%Y, %H:%M")
        
        await message.reply(
            f"‚úÖ –î–∞–Ω–Ω—ã–µ –æ —Å—Ç—É–ª–µ –∑–∞–ø–∏—Å–∞–Ω—ã\n"
            f"üìÖ –í—Ä–µ–º—è: {date_str}"
        )
        await show_main_menu(message)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ —Å—Ç—É–ª–µ: {e}")
        await message.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö")
    finally:
        db.close()
        await state.finish()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–µ—Å–∞
@dp.message_handler(state=WeightState.waiting_for_weight)
async def handle_weight_input(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –≤–µ—Å–∞"""
    try:
        weight = float(message.text.strip())
        db: Session = next(get_db())
        child = db.query(Child).first()
        weight_record = Weight(
            child_id=child.id,
            weight=weight,
            timestamp=datetime.now()
        )
        db.add(weight_record)
        db.commit()
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
        date_str = weight_record.timestamp.strftime("%d.%m.%Y, %H:%M")
        
        await message.reply(
            f"‚úÖ –í–µ—Å {weight} –∫–≥ –∑–∞–ø–∏—Å–∞–Ω\n"
            f"üìÖ –í—Ä–µ–º—è: {date_str}"
        )
        await show_main_menu(message)
    except ValueError:
        await message.reply("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–µ—Å –≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤–µ—Å–∞: {e}")
        await message.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö")
    finally:
        db.close()
        await state.finish()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ª–µ–∫–∞—Ä—Å—Ç–≤
@dp.message_handler(state=MedicationState.waiting_for_name)
async def handle_medication_name(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –ª–µ–∫–∞—Ä—Å—Ç–≤–∞"""
    await state.update_data(medication_name=message.text)
    await message.reply("–í–≤–µ–¥–∏—Ç–µ –¥–æ–∑–∏—Ä–æ–≤–∫—É:")
    await MedicationState.waiting_for_dosage.set()

@dp.message_handler(state=MedicationState.waiting_for_dosage)
async def handle_medication_dosage(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∑–∏—Ä–æ–≤–∫–∏ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞"""
    data = await state.get_data()
    db: Session = next(get_db())
    try:
        child = db.query(Child).first()
        medication = Medication(
            child_id=child.id,
            medication_name=data['medication_name'],
            dosage=message.text,
            timestamp=datetime.now()
        )
        db.add(medication)
        db.commit()
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
        date_str = medication.timestamp.strftime("%d.%m.%Y, %H:%M")
        
        await message.reply(
            f"‚úÖ –õ–µ–∫–∞—Ä—Å—Ç–≤–æ –∑–∞–ø–∏—Å–∞–Ω–æ: {data['medication_name']} - {message.text}\n"
            f"üìÖ –í—Ä–µ–º—è: {date_str}"
        )
        await show_main_menu(message)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞: {e}")
        await message.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö")
    finally:
        db.close()
        await state.finish()

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è AI –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
@dp.message_handler(commands=['ai'])
async def ai_command(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∫ AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—É"""
    await message.reply(
        "ü§ñ –ó–∞–¥–∞–π—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—É. –Ø –ø–æ–º–æ–≥—É —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏ –æ –∑–¥–æ—Ä–æ–≤—å–µ, —Ä–∞–∑–≤–∏—Ç–∏–∏ –∏ —É—Ö–æ–¥–µ –∑–∞ —Ä–µ–±–µ–Ω–∫–æ–º.",
        reply_markup=InlineKeyboardMarkup().add(
            InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data='back_to_menu')
        )
    )

@dp.message_handler(commands=['reset'])
async def reset_ai_history(message: types.Message):
    """–°–±—Ä–æ—Å –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–∞ —Å AI"""
    ai_assistant.clear_history()
    await message.reply(
        "üîÑ *–ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ —Å AI —Å–±—Ä–æ—à–µ–Ω–∞*\n\n"
        "–¢–µ–ø–µ—Ä—å AI –Ω–µ –±—É–¥–µ—Ç —É—á–∏—Ç—ã–≤–∞—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ.",
        parse_mode=ParseMode.MARKDOWN
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –¥–ª—è AI –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
@dp.callback_query_handler(lambda c: c.data == 'ai_consult')
async def process_ai_consult(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ AI –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é"""
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(
        callback_query.from_user.id,
        "ü§ñ –ó–∞–¥–∞–π—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—É. –Ø –ø–æ–º–æ–≥—É —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏ –æ –∑–¥–æ—Ä–æ–≤—å–µ, —Ä–∞–∑–≤–∏—Ç–∏–∏ –∏ —É—Ö–æ–¥–µ –∑–∞ —Ä–µ–±–µ–Ω–∫–æ–º.",
        reply_markup=InlineKeyboardMarkup().add(
            InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data='back_to_menu')
        )
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
@dp.callback_query_handler(lambda c: c.data == 'stats')
async def process_stats(callback_query: types.CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    await bot.answer_callback_query(callback_query.id)
    db: Session = next(get_db())
    try:
        child = db.query(Child).first()
        if not child:
            await bot.send_message(callback_query.from_user.id, "–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ —Ä–µ–±–µ–Ω–∫–∞")
            return
            
        # –ü–æ–¥—Å—á–µ—Ç –¥–∞–Ω–Ω—ã—Ö
        feedings_today = db.query(Feeding).filter(
            Feeding.child_id == child.id,
            Feeding.timestamp >= datetime.now().replace(hour=0, minute=0, second=0)
        ).count()
        
        total_ml_today = db.query(Feeding).filter(
            Feeding.child_id == child.id,
            Feeding.timestamp >= datetime.now().replace(hour=0, minute=0, second=0)
        ).with_entities(func.sum(Feeding.amount)).scalar() or 0
        
        last_weight = db.query(Weight).filter_by(child_id=child.id).order_by(Weight.timestamp.desc()).first()
        
        # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –≤–æ–∑—Ä–∞—Å—Ç–∞
        age_days = (datetime.now().date() - child.birth_date).days
        age_months = age_days // 30
        
        stats_text = f"""üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è {child.name}*
        
üë∂ –í–æ–∑—Ä–∞—Å—Ç: {age_months} –º–µ—Å. ({age_days} –¥–Ω–µ–π)
üçº –ö–æ—Ä–º–ª–µ–Ω–∏–π —Å–µ–≥–æ–¥–Ω—è: {feedings_today}
ÔøΩÔøΩ –í—Å–µ–≥–æ –º–æ–ª–æ–∫–∞ —Å–µ–≥–æ–¥–Ω—è: {total_ml_today} –º–ª
‚öñÔ∏è –ü–æ—Å–ª–µ–¥–Ω–∏–π –≤–µ—Å: {last_weight.weight if last_weight else '–ù–µ —É–∫–∞–∑–∞–Ω'} –∫–≥
        """
        
        await bot.send_message(
            callback_query.from_user.id,
            stats_text,
            parse_mode=ParseMode.MARKDOWN
        )
    finally:
        db.close()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞ (–æ–±—â–∞—è –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∏ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π)
async def process_message_text(text: str, message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å AI —Å –ø–æ–ª–Ω—ã–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º –∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
    db: Session = next(get_db())
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        if text.lower().strip() in ['—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', '—Å–≤–æ–¥–∫–∞', '–∞–Ω–∞–ª–∏–∑', '—Ä–∞–∑–≤–∏—Ç–∏–µ']:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–≤–æ–¥–∫—É –æ —Ä–∞–∑–≤–∏—Ç–∏–∏ —Ä–µ–±–µ–Ω–∫–∞
            await message.reply("üîÑ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –¥–∞–Ω–Ω—ã–µ –æ —Ä–∞–∑–≤–∏—Ç–∏–∏ —Ä–µ–±–µ–Ω–∫–∞...")
            summary = ai_assistant.generate_development_summary(db)
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            response = f"üìä *–°–≤–æ–¥–∫–∞ –æ —Ä–∞–∑–≤–∏—Ç–∏–∏ —Ä–µ–±–µ–Ω–∫–∞*\n\n{summary}"
            await message.reply(response, parse_mode=ParseMode.MARKDOWN)
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–±–µ–Ω–∫–µ
        child = db.query(Child).first()
        if not child:
            await message.reply("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ —Ä–µ–±–µ–Ω–∫–∞")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–º –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏
        if text.lower().startswith('–¥–æ–±–∞–≤—å –∑–∞–º–µ—Ç–∫—É') or text.lower().startswith('—Å–æ–∑–¥–∞–π –∑–∞–º–µ—Ç–∫—É'):
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏
            note_text = text.split(' ', 2)[-1]  # –£–¥–∞–ª—è–µ–º "–¥–æ–±–∞–≤—å –∑–∞–º–µ—Ç–∫—É" –∏–ª–∏ "—Å–æ–∑–¥–∞–π –∑–∞–º–µ—Ç–∫—É"
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º OpenAI –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –Ω–∞ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ
            try:
                prompt = f"""–†–∞–∑–¥–µ–ª–∏ —Å–ª–µ–¥—É—é—â–∏–π —Ç–µ–∫—Å—Ç –Ω–∞ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏:

{note_text}

–í–µ—Ä–Ω–∏ –æ—Ç–≤–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:
{{
  "title": "–ó–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞–º–µ—Ç–∫–∏ (–∫–æ—Ä–æ—Ç–∫–∏–π)",
  "content": "–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ (–ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç)"
}}"""

                response = openai.ChatCompletion.create(
                    model="gpt-3.5-turbo",
                    messages=[
                        {"role": "system", "content": "–¢—ã - –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–≥–∞–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –∑–∞–º–µ—Ç–∫–∏."},
                        {"role": "user", "content": prompt}
                    ],
                    temperature=0.3,
                    max_tokens=500
                )
                
                result = response['choices'][0]['message']['content'].strip()
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º JSON –∏–∑ –æ—Ç–≤–µ—Ç–∞
                try:
                    # –ù–∞—Ö–æ–¥–∏–º –Ω–∞—á–∞–ª–æ –∏ –∫–æ–Ω–µ—Ü JSON
                    start_idx = result.find('{')
                    end_idx = result.rfind('}') + 1
                    
                    if start_idx >= 0 and end_idx > start_idx:
                        json_str = result[start_idx:end_idx]
                        note_data = json.loads(json_str)
                        
                        title = note_data.get('title', '–ù–æ–≤–∞—è –∑–∞–º–µ—Ç–∫–∞')
                        content = note_data.get('content', note_text)
                        
                        # –°–æ–∑–¥–∞–µ–º –∑–∞–º–µ—Ç–∫—É
                        note = Note(
                            child_id=child.id,
                            title=title,
                            content=content,
                            timestamp=datetime.now()
                        )
                        
                        db.add(note)
                        db.commit()
                        
                        await message.reply(
                            f"‚úÖ –ó–∞–º–µ—Ç–∫–∞ \"{title}\" —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!",
                            reply_markup=get_main_keyboard()
                        )
                        return
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ JSON —Å –∑–∞–º–µ—Ç–∫–æ–π: {e}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–º–µ—Ç–∫–∏: {e}")
            
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–¥–µ–ª–∏—Ç—å –Ω–∞ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ, —Å–æ–∑–¥–∞–µ–º –∑–∞–º–µ—Ç–∫—É —Å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º –∑–∞–≥–æ–ª–æ–≤–∫–æ–º
            note = Note(
                child_id=child.id,
                title="–ù–æ–≤–∞—è –∑–∞–º–µ—Ç–∫–∞",
                content=note_text,
                timestamp=datetime.now()
            )
            
            db.add(note)
            db.commit()
            
            await message.reply(
                f"‚úÖ –ó–∞–º–µ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!",
                reply_markup=get_main_keyboard()
            )
            return
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–º –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∏–∑ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π
        if ai_assistant.parse_prescription_reminders_request(text):
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
            prescriptions = db.query(Prescription).filter(
                Prescription.child_id == child.id,
                Prescription.is_active == 1
            ).all()
            
            if not prescriptions:
                await message.reply(
                    "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"
                )
                return
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–º–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏
            message_text = "üìã *–ü—Ä–µ–¥–ª–∞–≥–∞–µ–º—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏–∑ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π*\n\n"
            
            all_options = []
            
            for prescription in prescriptions:
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
                options = generate_reminder_options(prescription)
                if options:
                    message_text += f"*{prescription.medication_name}*:\n"
                    for i, option in enumerate(options, 1):
                        message_text += (
                            f"  {i}. {option['description']}\n"
                            f"  ‚è∞ –í—Ä–µ–º—è: {option['time']}\n"
                            f"  üîÑ –ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ: {option['repeat_text']}\n\n"
                        )
                    all_options.extend(options)
            
            if not all_options:
                await message.reply(
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è –≤–∞—à–∏—Ö –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π"
                )
                return
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
            keyboard = InlineKeyboardMarkup(row_width=1)
            keyboard.add(
                InlineKeyboardButton("‚úÖ –î–æ–±–∞–≤–∏—Ç—å –≤—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è", callback_data="add_all_prescription_reminders"),
                InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="back_to_menu")
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
            await state.update_data(prescription_reminder_options=all_options)
            
            await message.reply(
                message_text,
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=keyboard
            )
            return
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–ø–∏—Å—å—é –æ –∫–æ—Ä–º–ª–µ–Ω–∏–∏
        feeding_data = ai_assistant.parse_feeding(text)
        if feeding_data:
            try:
                # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –∫–æ—Ä–º–ª–µ–Ω–∏–∏
                feeding = Feeding(
                    child_id=child.id,
                    amount=feeding_data['amount'],
                    food_type=feeding_data['food_type'],
                    timestamp=datetime.now()
                )
                
                db.add(feeding)
                db.commit()
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø–∏—Ç–∞–Ω–∏—è –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
                food_type_text = "–≥—Ä—É–¥–Ω–æ–µ –º–æ–ª–æ–∫–æ"
                if feeding_data['food_type'] == 'formula':
                    food_type_text = "—Å–º–µ—Å—å"
                elif feeding_data['food_type'] == 'food':
                    food_type_text = "–ø—Ä–∏–∫–æ—Ä–º"
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏
                await message.reply(
                    f"‚úÖ *–ó–∞–ø–∏—Å—å –æ –∫–æ—Ä–º–ª–µ–Ω–∏–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∞*\n\n"
                    f"üçº –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {feeding_data['amount']} –º–ª\n"
                    f"ü•õ –¢–∏–ø: {food_type_text}\n"
                    f"üïí –í—Ä–µ–º—è: {datetime.now().strftime('%H:%M')}\n",
                    parse_mode=ParseMode.MARKDOWN
                )
                return
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏ –æ –∫–æ—Ä–º–ª–µ–Ω–∏–∏: {e}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–ø–∏—Å—å—é –æ —Å—Ç—É–ª–µ
        stool_data = ai_assistant.parse_stool(text)
        if stool_data:
            try:
                # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ —Å—Ç—É–ª–µ
                stool = Stool(
                    child_id=child.id,
                    description=stool_data['description'],
                    color=stool_data['color'],
                    timestamp=datetime.now()
                )
                
                db.add(stool)
                db.commit()
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ü–≤–µ—Ç–µ
                color_text = f"üé® –¶–≤–µ—Ç: {stool_data['color']}\n" if stool_data['color'] else ""
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é
                keyboard = InlineKeyboardMarkup()
                keyboard.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data='back_to_menu'))
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏
                await message.reply(
                    f"‚úÖ *–ó–∞–ø–∏—Å—å –æ —Å—Ç—É–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞*\n\n"
                    f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {stool_data['description']}\n"
                    f"{color_text}"
                    f"üïí –í—Ä–µ–º—è: {datetime.now().strftime('%H:%M')}\n",
                    parse_mode=ParseMode.MARKDOWN,
                    reply_markup=keyboard
                )
                return
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏ –æ —Å—Ç—É–ª–µ: {e}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–ø–∏—Å—å—é –æ –ø—Ä–∏–µ–º–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞
        medication_data = ai_assistant.parse_medication(text)
        if medication_data:
            try:
                # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –ª–µ–∫–∞—Ä—Å—Ç–≤–µ
                medication = Medication(
                    child_id=child.id,
                    medication_name=medication_data['medication_name'],
                    dosage=medication_data['dosage'] or "",
                    timestamp=datetime.now()
                )
                
                db.add(medication)
                db.commit()
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –¥–æ–∑–∏—Ä–æ–≤–∫–µ
                dosage_text = f"üíä –î–æ–∑–∏—Ä–æ–≤–∫–∞: {medication_data['dosage']}\n" if medication_data['dosage'] else ""
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏
                await message.reply(
                    f"‚úÖ *–ó–∞–ø–∏—Å—å –æ –ø—Ä–∏–µ–º–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞*\n\n"
                    f"üíä –õ–µ–∫–∞—Ä—Å—Ç–≤–æ: {medication_data['medication_name']}\n"
                    f"{dosage_text}"
                    f"üïí –í—Ä–µ–º—è: {datetime.now().strftime('%H:%M')}\n",
                    parse_mode=ParseMode.MARKDOWN
                )
                return
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏ –æ –ª–µ–∫–∞—Ä—Å—Ç–≤–µ: {e}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–º –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        reminder_data = reminder_parser.parse_reminder(text)
        if reminder_data:
            try:
                created_reminders = []
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
                for reminder_info in reminder_data:
                    # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
                    reminder_time_str = f"{reminder_info['date']} {reminder_info['time']}"
                    reminder_time = datetime.strptime(reminder_time_str, "%d.%m.%Y %H:%M")
                    
                    # –î–ª—è –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è
                    if reminder_info['repeat_type'] != 'once':
                        # –ï—Å–ª–∏ –≤—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ —Å–µ–≥–æ–¥–Ω—è, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞ –∑–∞–≤—Ç—Ä–∞
                        if reminder_time <= datetime.now():
                            reminder_time = reminder_time + timedelta(days=1)
                    else:
                        # –î–ª—è –æ–¥–Ω–æ–∫—Ä–∞—Ç–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Ä–µ–º—è –≤ –±—É–¥—É—â–µ–º
                        if reminder_time <= datetime.now():
                            await message.reply(f"‚ùå –í—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è '{reminder_info['description']}' –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º.")
                            continue
                    
                    # –°–æ–∑–¥–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
                    reminder = Reminder(
                        child_id=child.id,
                        description=reminder_info['description'],
                        reminder_time=reminder_time,
                        status='active',
                        repeat_type=reminder_info['repeat_type'],
                        repeat_interval=reminder_info['repeat_interval']
                    )
                    
                    db.add(reminder)
                    created_reminders.append((reminder, reminder_info))
                
                if created_reminders:
                    db.commit()
                    
                    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
                    success_messages = []
                    for reminder, reminder_info in created_reminders:
                        repeat_text = "–æ–¥–Ω–æ–∫—Ä–∞—Ç–Ω–æ–µ"
                        if reminder_info['repeat_type'] == 'daily':
                            repeat_text = f"–∫–∞–∂–¥—ã–µ {reminder_info['repeat_interval']} –¥–µ–Ω—å(–¥–Ω–µ–π)"
                        elif reminder_info['repeat_type'] == 'weekly':
                            repeat_text = f"–∫–∞–∂–¥—ã–µ {reminder_info['repeat_interval']} –Ω–µ–¥–µ–ª—é(–Ω–µ–¥–µ–ª—å)"
                        elif reminder_info['repeat_type'] == 'monthly':
                            repeat_text = f"–∫–∞–∂–¥—ã–µ {reminder_info['repeat_interval']} –º–µ—Å—è—Ü(–µ–≤)"
                        elif reminder_info['repeat_type'] == 'hourly':
                            repeat_text = f"–∫–∞–∂–¥—ã–µ {reminder_info['repeat_interval']} —á–∞—Å(–æ–≤)"
                        
                        success_messages.append(
                            f"üìù {reminder_info['description']}\n"
                            f"‚è∞ –í—Ä–µ–º—è: {reminder.reminder_time.strftime('%d.%m.%Y, %H:%M')}\n"
                            f"üîÑ –ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ: {repeat_text}"
                        )
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é
                    keyboard = InlineKeyboardMarkup()
                    keyboard.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data='back_to_menu'))
                    
                    if len(created_reminders) == 1:
                        await message.reply(
                            f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ!\n\n{success_messages[0]}",
                            reply_markup=keyboard
                        )
                    else:
                        await message.reply(
                            f"‚úÖ –°–æ–∑–¥–∞–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {len(created_reminders)}\n\n" + "\n\n".join(success_messages),
                            reply_markup=keyboard
                        )
                    return
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")
                await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.")
                return
        
        # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–¥–æ—à–ª–æ, —Å—á–∏—Ç–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–º –∫ AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—É
        with SessionLocal() as db:
            try:
                # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
                response = ai_assistant.get_response(text, db)
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é
                keyboard = InlineKeyboardMarkup()
                keyboard.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data='back_to_menu'))
                
                await message.reply(response, reply_markup=keyboard)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞ –æ—Ç AI: {e}")
                await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–ø–∏—Å—å—é –æ –≤–µ—Å–µ
        weight_data = ai_assistant.parse_weight(text)
        if weight_data:
            try:
                # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –≤–µ—Å–µ
                weight = Weight(
                    child_id=child.id,
                    weight=weight_data['weight'],
                    timestamp=datetime.now()
                )
                
                db.add(weight)
                db.commit()
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é
                keyboard = InlineKeyboardMarkup()
                keyboard.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data='back_to_menu'))
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏
                await message.reply(
                    f"‚úÖ *–ó–∞–ø–∏—Å—å –æ –≤–µ—Å–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞*\n\n"
                    f"‚öñÔ∏è –í–µ—Å: {weight_data['weight']} –∫–≥\n"
                    f"üìÖ –î–∞—Ç–∞: {datetime.now().strftime('%d.%m.%Y, %H:%M')}\n",
                    parse_mode=ParseMode.MARKDOWN,
                    reply_markup=keyboard
                )
                return
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏ –æ –≤–µ—Å–µ: {e}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–ø–∏—Å—å—é –æ —Å—Ç—É–ª–µ
        stool_data = ai_assistant.parse_stool(text)
        if stool_data:
            try:
                # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ —Å—Ç—É–ª–µ
                stool = Stool(
                    child_id=child.id,
                    description=stool_data['description'],
                    color=stool_data['color'],
                    timestamp=datetime.now()
                )
                
                db.add(stool)
                db.commit()
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ü–≤–µ—Ç–µ
                color_text = f"üé® –¶–≤–µ—Ç: {stool_data['color']}\n" if stool_data['color'] else ""
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é
                keyboard = InlineKeyboardMarkup()
                keyboard.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data='back_to_menu'))
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏
                await message.reply(
                    f"‚úÖ *–ó–∞–ø–∏—Å—å –æ —Å—Ç—É–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞*\n\n"
                    f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {stool_data['description']}\n"
                    f"{color_text}"
                    f"üïí –í—Ä–µ–º—è: {datetime.now().strftime('%H:%M')}\n",
                    parse_mode=ParseMode.MARKDOWN,
                    reply_markup=keyboard
                )
                return
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏ –æ —Å—Ç—É–ª–µ: {e}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–ø–∏—Å—å—é –æ –ø—Ä–∏–µ–º–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞
        medication_data = ai_assistant.parse_medication(text)
        if medication_data:
            try:
                # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –ª–µ–∫–∞—Ä—Å—Ç–≤–µ
                medication = Medication(
                    child_id=child.id,
                    medication_name=medication_data['medication_name'],
                    dosage=medication_data['dosage'] or "",
                    timestamp=datetime.now()
                )
                
                db.add(medication)
                db.commit()
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –¥–æ–∑–∏—Ä–æ–≤–∫–µ
                dosage_text = f"üíä –î–æ–∑–∏—Ä–æ–≤–∫–∞: {medication_data['dosage']}\n" if medication_data['dosage'] else ""
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏
                await message.reply(
                    f"‚úÖ *–ó–∞–ø–∏—Å—å –æ –ø—Ä–∏–µ–º–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞*\n\n"
                    f"üíä –õ–µ–∫–∞—Ä—Å—Ç–≤–æ: {medication_data['medication_name']}\n"
                    f"{dosage_text}"
                    f"üïí –í—Ä–µ–º—è: {datetime.now().strftime('%H:%M')}\n",
                    parse_mode=ParseMode.MARKDOWN
                )
                return
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏ –æ –ª–µ–∫–∞—Ä—Å—Ç–≤–µ: {e}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–º –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        reminder_data = reminder_parser.parse_reminder(text)
        if reminder_data:
            try:
                created_reminders = []
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
                for reminder_info in reminder_data:
                    # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
                    reminder_time_str = f"{reminder_info['date']} {reminder_info['time']}"
                    reminder_time = datetime.strptime(reminder_time_str, "%d.%m.%Y %H:%M")
                    
                    # –î–ª—è –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è
                    if reminder_info['repeat_type'] != 'once':
                        # –ï—Å–ª–∏ –≤—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ —Å–µ–≥–æ–¥–Ω—è, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞ –∑–∞–≤—Ç—Ä–∞
                        if reminder_time <= datetime.now():
                            reminder_time = reminder_time + timedelta(days=1)
                    else:
                        # –î–ª—è –æ–¥–Ω–æ–∫—Ä–∞—Ç–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Ä–µ–º—è –≤ –±—É–¥—É—â–µ–º
                        if reminder_time <= datetime.now():
                            await message.reply(f"‚ùå –í—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è '{reminder_info['description']}' –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º.")
                            continue
                    
                    # –°–æ–∑–¥–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
                    reminder = Reminder(
                        child_id=child.id,
                        description=reminder_info['description'],
                        reminder_time=reminder_time,
                        status='active',
                        repeat_type=reminder_info['repeat_type'],
                        repeat_interval=reminder_info['repeat_interval']
                    )
                    
                    db.add(reminder)
                    created_reminders.append((reminder, reminder_info))
                
                if created_reminders:
                    db.commit()
                    
                    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
                    success_messages = []
                    for reminder, reminder_info in created_reminders:
                        repeat_text = "–æ–¥–Ω–æ–∫—Ä–∞—Ç–Ω–æ–µ"
                        if reminder_info['repeat_type'] == 'daily':
                            repeat_text = f"–∫–∞–∂–¥—ã–µ {reminder_info['repeat_interval']} –¥–µ–Ω—å(–¥–Ω–µ–π)"
                        elif reminder_info['repeat_type'] == 'weekly':
                            repeat_text = f"–∫–∞–∂–¥—ã–µ {reminder_info['repeat_interval']} –Ω–µ–¥–µ–ª—é(–Ω–µ–¥–µ–ª—å)"
                        elif reminder_info['repeat_type'] == 'monthly':
                            repeat_text = f"–∫–∞–∂–¥—ã–µ {reminder_info['repeat_interval']} –º–µ—Å—è—Ü(–µ–≤)"
                        elif reminder_info['repeat_type'] == 'hourly':
                            repeat_text = f"–∫–∞–∂–¥—ã–µ {reminder_info['repeat_interval']} —á–∞—Å(–æ–≤)"
                        
                        success_messages.append(
                            f"üìù {reminder_info['description']}\n"
                            f"‚è∞ –í—Ä–µ–º—è: {reminder.reminder_time.strftime('%d.%m.%Y, %H:%M')}\n"
                            f"üîÑ –ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ: {repeat_text}"
                        )
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é
                    keyboard = InlineKeyboardMarkup()
                    keyboard.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data='back_to_menu'))
                    
                    if len(created_reminders) == 1:
                        await message.reply(
                            f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ!\n\n{success_messages[0]}",
                            reply_markup=keyboard
                        )
                    else:
                        await message.reply(
                            f"‚úÖ –°–æ–∑–¥–∞–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {len(created_reminders)}\n\n" + "\n\n".join(success_messages),
                            reply_markup=keyboard
                        )
                    return
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")
                await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.")
                return
    finally:
        db.close()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message_handler(content_types=types.ContentType.TEXT)
async def handle_text_message(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    db: Session = next(get_db())
    try:
        await save_user(message.from_user, db)
    finally:
        db.close()
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    current_state = await state.get_state()
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if current_state:
        return
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç
    await process_message_text(message.text, message, state)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message_handler(content_types=types.ContentType.VOICE)
async def handle_voice_message(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    current_state = await state.get_state()
    if current_state is not None:
        return
    
    await message.reply("üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...")
    
    try:
        # –°–∫–∞—á–∏–≤–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        file_info = await bot.get_file(message.voice.file_id)
        voice_file = io.BytesIO()
        await bot.download_file(file_info.file_path, voice_file)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        with tempfile.NamedTemporaryFile(suffix=".ogg") as temp_voice:
            temp_voice.write(voice_file.getvalue())
            temp_voice.flush()
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Ç–µ–∫—Å—Ç —Å –ø–æ–º–æ—â—å—é OpenAI Whisper API
            with open(temp_voice.name, "rb") as audio_file:
                transcript = openai.Audio.transcribe("whisper-1", audio_file)
            
            text = transcript.get("text", "")
            
            if text:
                await message.reply(f"üé§ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: {text}")
                await process_message_text(text, message, state)
            else:
                await message.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç–µ–∫—Å—Ç –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Ä–µ–±–µ–Ω–∫–∞
@dp.callback_query_handler(lambda c: c.data == 'clear_child_data')
async def process_clear_child_data(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –æ—á–∏—Å—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö —Ä–µ–±–µ–Ω–∫–∞"""
    await bot.answer_callback_query(callback_query.id)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("‚úÖ –î–∞, –æ—á–∏—Å—Ç–∏—Ç—å", callback_data='confirm_clear_data'),
        InlineKeyboardButton("‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∞", callback_data='settings')
    )
    
    await bot.send_message(
        callback_query.from_user.id,
        "‚ö†Ô∏è *–í–ù–ò–ú–ê–ù–ò–ï! –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö*\n\n"
        "–í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å —É–¥–∞–ª–∏—Ç—å –í–°–ï –¥–∞–Ω–Ω—ã–µ –æ —Ä–µ–±–µ–Ω–∫–µ:\n"
        "‚Ä¢ –ó–∞–ø–∏—Å–∏ –æ –∫–æ—Ä–º–ª–µ–Ω–∏—è—Ö\n"
        "‚Ä¢ –ó–∞–ø–∏—Å–∏ –æ —Å—Ç—É–ª–µ\n"
        "‚Ä¢ –ó–∞–ø–∏—Å–∏ –æ –≤–µ—Å–µ\n"
        "‚Ä¢ –ó–∞–ø–∏—Å–∏ –æ –ø—Ä–∏–µ–º–µ –ª–µ–∫–∞—Ä—Å—Ç–≤\n"
        "‚Ä¢ –í—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è\n"
        "‚Ä¢ –í—Å–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è\n\n"
        "–≠—Ç–∞ –æ–ø–µ—Ä–∞—Ü–∏—è *–Ω–µ–æ–±—Ä–∞—Ç–∏–º–∞*. –í—ã —É–≤–µ—Ä–µ–Ω—ã?",
        parse_mode=ParseMode.MARKDOWN,
        reply_markup=keyboard
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö
@dp.callback_query_handler(lambda c: c.data == 'confirm_clear_data')
async def confirm_clear_data(callback_query: types.CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Ä–µ–±–µ–Ω–∫–∞"""
    await bot.answer_callback_query(callback_query.id)
    
    db: Session = next(get_db())
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–±–µ–Ω–∫–∞
        child = db.query(Child).first()
        if not child:
            await bot.send_message(
                callback_query.from_user.id,
                "‚ùå –†–µ–±–µ–Ω–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."
            )
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è —Ä–µ–±–µ–Ω–∫–∞
        child_name = child.name
        
        # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        db.query(Feeding).filter(Feeding.child_id == child.id).delete()
        db.query(Stool).filter(Stool.child_id == child.id).delete()
        db.query(Weight).filter(Weight.child_id == child.id).delete()
        db.query(Medication).filter(Medication.child_id == child.id).delete()
        db.query(Reminder).filter(Reminder.child_id == child.id).delete()
        db.query(Prescription).filter(Prescription.child_id == child.id).delete()
        
        # –§–∏–∫—Å–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        db.commit()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ—á–∏—Å—Ç–∫–µ
        await bot.send_message(
            callback_query.from_user.id,
            f"‚úÖ *–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω—ã*\n\n"
            f"–í—Å–µ –∑–∞–ø–∏—Å–∏ –æ —Ä–µ–±–µ–Ω–∫–µ {child_name} –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.\n"
            f"–ü—Ä–æ—Ñ–∏–ª—å —Ä–µ–±–µ–Ω–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω, –Ω–æ –≤—Å–µ –∑–∞–ø–∏—Å–∏ –æ –∫–æ—Ä–º–ª–µ–Ω–∏—è—Ö, —Å—Ç—É–ª–µ, –≤–µ—Å–µ, "
            f"–ª–µ–∫–∞—Ä—Å—Ç–≤–∞—Ö, –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è—Ö –∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è—Ö —É–¥–∞–ª–µ–Ω—ã.",
            parse_mode=ParseMode.MARKDOWN
        )
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        await process_main_menu(callback_query)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö —Ä–µ–±–µ–Ω–∫–∞: {e}")
        await bot.send_message(
            callback_query.from_user.id,
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö."
        )
    finally:
        db.close()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
@dp.callback_query_handler(lambda c: c.data == 'add_prescription')
async def add_prescription_start(callback_query: types.CallbackQuery):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è"""
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(
        callback_query.from_user.id,
        "üìã *–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è*\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –æ—Ç –≤—Ä–∞—á–∞ (–≤—Å–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞, –ø—Ä–æ—Ü–µ–¥—É—Ä—ã, —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏):",
        parse_mode=ParseMode.MARKDOWN
    )
    await PrescriptionState.waiting_for_full_text.set()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
@dp.message_handler(state=PrescriptionState.waiting_for_full_text)
async def handle_prescription_full_text(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è"""
    full_text = message.text
    await state.update_data(full_text=full_text)
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º OpenAI –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ª–µ–∫–∞—Ä—Å—Ç–≤
    try:
        prompt = f"""–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–ª–µ–¥—É—é—â–µ–µ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∏ –æ–ø—Ä–µ–¥–µ–ª–∏ –≤—Å–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞/–ø—Ä–µ–ø–∞—Ä–∞—Ç—ã —Å –∏—Ö –¥–æ–∑–∏—Ä–æ–≤–∫–∞–º–∏:

{full_text}

–í–µ—Ä–Ω–∏ –æ—Ç–≤–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:
[
  {{
    "name": "–ù–∞–∑–≤–∞–Ω–∏–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞",
    "dosage": "–î–æ–∑–∏—Ä–æ–≤–∫–∞"
  }}
]

–í–∫–ª—é—á–∏ –≤—Å–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞, –∫–æ—Ç–æ—Ä—ã–µ —É–ø–æ–º–∏–Ω–∞—é—Ç—Å—è –≤ —Ç–µ–∫—Å—Ç–µ."""

        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": "–¢—ã - –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –≤—Ä–∞—á–µ–π."},
                {"role": "user", "content": prompt}
            ],
            temperature=0.3,
            max_tokens=500
        )
        
        result = response['choices'][0]['message']['content'].strip()
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º JSON –∏–∑ –æ—Ç–≤–µ—Ç–∞
        try:
            # –ù–∞—Ö–æ–¥–∏–º –Ω–∞—á–∞–ª–æ –∏ –∫–æ–Ω–µ—Ü JSON
            start_idx = result.find('[')
            end_idx = result.rfind(']') + 1
            
            if start_idx >= 0 and end_idx > start_idx:
                json_str = result[start_idx:end_idx]
                medications = json.loads(json_str)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—É—á–∏–ª–∏ —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –Ω—É–∂–Ω—ã–º–∏ –∫–ª—é—á–∞–º–∏
                valid_medications = []
                for med in medications:
                    if isinstance(med, dict) and 'name' in med:
                        valid_medications.append(med)
                
                if valid_medications:
                    await state.update_data(medications=valid_medications)
                    
                    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–∞–π–¥–µ–Ω–Ω—ã–º–∏ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞–º–∏
                    meds_text = "\n".join([f"‚Ä¢ {med['name']} - {med.get('dosage', '–¥–æ–∑–∏—Ä–æ–≤–∫–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞')}" for med in valid_medications])
                    await message.reply(
                        f"üíä *–ù–∞–π–¥–µ–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞:*\n\n{meds_text}\n\n"
                        f"üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –ø—Ä–∏–µ–º–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–∏–ª–∏ '—Å–µ–≥–æ–¥–Ω—è'):",
                        parse_mode=ParseMode.MARKDOWN
                    )
                    await PrescriptionState.waiting_for_start_date.set()
                    return
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ JSON —Å –ª–µ–∫–∞—Ä—Å—Ç–≤–∞–º–∏: {e}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –ª–µ–∫–∞—Ä—Å—Ç–≤: {e}")
    
    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –ª–µ–∫–∞—Ä—Å—Ç–≤–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç –∫–∞–∫ –Ω–∞–∑–≤–∞–Ω–∏–µ
    await state.update_data(medications=[{"name": "–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ", "dosage": "–°–º. –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç"}])
    await message.reply(
        "üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –ø—Ä–∏–µ–º–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–∏–ª–∏ '—Å–µ–≥–æ–¥–Ω—è'):"
    )
    await PrescriptionState.waiting_for_start_date.set()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
@dp.message_handler(state=PrescriptionState.waiting_for_start_date)
async def handle_prescription_start_date(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è"""
    try:
        if message.text.lower() == '—Å–µ–≥–æ–¥–Ω—è':
            start_date = datetime.now().date()
        else:
            start_date = datetime.strptime(message.text, "%d.%m.%Y").date()
        
        await state.update_data(start_date=start_date)
        await message.reply(
            "üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø—Ä–∏–µ–º–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–∏–ª–∏ '-' –µ—Å–ª–∏ –±–µ—Å—Å—Ä–æ—á–Ω–æ):"
        )
        await PrescriptionState.waiting_for_end_date.set()
    except ValueError:
        await message.reply(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì –∏–ª–∏ —Å–ª–æ–≤–æ '—Å–µ–≥–æ–¥–Ω—è'."
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∞—Ç—ã –æ–∫–æ–Ω—á–∞–Ω–∏—è –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
@dp.message_handler(state=PrescriptionState.waiting_for_end_date)
async def handle_prescription_end_date(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç—ã –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è"""
    try:
        end_date = None
        if message.text != '-':
            end_date = datetime.strptime(message.text, "%d.%m.%Y").date()
        
        await state.update_data(end_date=end_date)
        data = await state.get_data()
        
        db: Session = next(get_db())
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–±–µ–Ω–∫–µ
            child = db.query(Child).first()
            if not child:
                await message.reply("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ —Ä–µ–±–µ–Ω–∫–∞")
                await state.finish()
                return
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º OpenAI –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —á–∞—Å—Ç–æ—Ç—ã –ø—Ä–∏–µ–º–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞
            medications = data.get('medications', [])
            if not medications:
                medications = [{"name": "–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ", "dosage": "–°–º. –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç"}]
            
            try:
                prompt = f"""–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–ª–µ–¥—É—é—â–µ–µ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∏ –æ–ø—Ä–µ–¥–µ–ª–∏ —á–∞—Å—Ç–æ—Ç—É –ø—Ä–∏–µ–º–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞:

{data['full_text']}

–õ–µ–∫–∞—Ä—Å—Ç–≤–∞:
{", ".join([med["name"] for med in medications])}

–í–µ—Ä–Ω–∏ –æ—Ç–≤–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:
[
  {{
    "name": "–ù–∞–∑–≤–∞–Ω–∏–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞",
    "frequency": "–ß–∞—Å—Ç–æ—Ç–∞ –ø—Ä–∏–µ–º–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: '2 —Ä–∞–∑–∞ –≤ –¥–µ–Ω—å', '—É—Ç—Ä–æ–º –∏ –≤–µ—á–µ—Ä–æ–º')"
  }}
]"""

                response = openai.ChatCompletion.create(
                    model="gpt-3.5-turbo",
                    messages=[
                        {"role": "system", "content": "–¢—ã - –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –≤—Ä–∞—á–µ–π."},
                        {"role": "user", "content": prompt}
                    ],
                    temperature=0.3,
                    max_tokens=500
                )
                
                result = response['choices'][0]['message']['content'].strip()
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º JSON –∏–∑ –æ—Ç–≤–µ—Ç–∞
                try:
                    # –ù–∞—Ö–æ–¥–∏–º –Ω–∞—á–∞–ª–æ –∏ –∫–æ–Ω–µ—Ü JSON
                    start_idx = result.find('[')
                    end_idx = result.rfind(']') + 1
                    
                    if start_idx >= 0 and end_idx > start_idx:
                        json_str = result[start_idx:end_idx]
                        frequencies = json.loads(json_str)
                        
                        # –î–æ–±–∞–≤–ª—è–µ–º —á–∞—Å—Ç–æ—Ç—É –∫ –∫–∞–∂–¥–æ–º—É –ª–µ–∫–∞—Ä—Å—Ç–≤—É
                        for med in medications:
                            for freq in frequencies:
                                if med["name"].lower() in freq["name"].lower() or freq["name"].lower() in med["name"].lower():
                                    med["frequency"] = freq.get("frequency", "–µ–∂–µ–¥–Ω–µ–≤–Ω–æ")
                                    break
                            if "frequency" not in med:
                                med["frequency"] = "–µ–∂–µ–¥–Ω–µ–≤–Ω–æ"
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ JSON —Å —á–∞—Å—Ç–æ—Ç–∞–º–∏: {e}")
                    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —á–∞—Å—Ç–æ—Ç—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                    for med in medications:
                        if "frequency" not in med:
                            med["frequency"] = "–µ–∂–µ–¥–Ω–µ–≤–Ω–æ"
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ —á–∞—Å—Ç–æ—Ç—ã –ø—Ä–∏–µ–º–∞: {e}")
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —á–∞—Å—Ç–æ—Ç—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                for med in medications:
                    if "frequency" not in med:
                        med["frequency"] = "–µ–∂–µ–¥–Ω–µ–≤–Ω–æ"
            
            # –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ
            main_medication = medications[0] if medications else {"name": "–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ", "dosage": "–°–º. –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç", "frequency": "–µ–∂–µ–¥–Ω–µ–≤–Ω–æ"}
            
            prescription = Prescription(
                child_id=child.id,
                medication_name=main_medication["name"],
                dosage=main_medication.get("dosage", "–°–º. –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç"),
                frequency=main_medication.get("frequency", "–µ–∂–µ–¥–Ω–µ–≤–Ω–æ"),
                doctor_name=None,  # –ù–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–º—è –≤—Ä–∞—á–∞
                start_date=data['start_date'],
                end_date=data['end_date'],
                notes=None,
                full_text=data['full_text'],
                is_active=1,  # –ê–∫—Ç–∏–≤–Ω–æ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            )
            
            db.add(prescription)
            db.commit()
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏
            end_date_text = f"–¥–æ {data['end_date'].strftime('%d.%m.%Y')}" if data['end_date'] else "–±–µ—Å—Å—Ä–æ—á–Ω–æ"
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –ª–µ–∫–∞—Ä—Å—Ç–≤
            meds_text = ""
            for i, med in enumerate(medications, 1):
                dosage_text = f" - {med.get('dosage', '')}" if med.get('dosage') else ""
                frequency_text = f", {med.get('frequency', '–µ–∂–µ–¥–Ω–µ–≤–Ω–æ')}" if med.get('frequency') else ""
                meds_text += f"{i}. *{med['name']}*{dosage_text}{frequency_text}\n"
            
            success_message = f"""‚úÖ *–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ!*

üìã *–°–ø–∏—Å–æ–∫ –ª–µ–∫–∞—Ä—Å—Ç–≤:*
{meds_text}
üìÖ –ü–µ—Ä–∏–æ–¥: —Å {data['start_date'].strftime('%d.%m.%Y')} {end_date_text}

üìÑ *–ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è:*
{data['full_text']}
"""
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞
            keyboard = InlineKeyboardMarkup(row_width=1)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è –≤—Å–µ—Ö –ª–µ–∫–∞—Ä—Å—Ç–≤
            keyboard.add(
                InlineKeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö", callback_data=f"create_reminders_for_{prescription.id}")
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞
            for i, med in enumerate(medications):
                keyboard.add(
                    InlineKeyboardButton(f"‚ûï –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è {med['name']}", callback_data=f"create_reminders_for_med_{prescription.id}_{i}")
                )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
            keyboard.add(
                InlineKeyboardButton("üìã –ö –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è–º", callback_data="prescriptions"),
                InlineKeyboardButton("üîô –í –º–µ–Ω—é", callback_data="back_to_menu")
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ –ª–µ–∫–∞—Ä—Å—Ç–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –≤ –∫—ç—à–µ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
            await state.update_data(prescription_id=prescription.id, medications=medications)
            
            await message.reply(
                success_message,
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=keyboard
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è: {e}")
            await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è.")
        finally:
            db.close()
            await state.finish()
    except ValueError:
        await message.reply(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì –∏–ª–∏ —Å–∏–º–≤–æ–ª '-'."
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∏–∑ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
@dp.callback_query_handler(lambda c: c.data and c.data.startswith('create_reminders_for_'))
async def create_reminders_for_prescription(callback_query: types.CallbackQuery):
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è"""
    await bot.answer_callback_query(callback_query.id)
    
    # –ü–æ–ª—É—á–∞–µ–º ID –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ callback_data
    prescription_id = int(callback_query.data.split('_')[-1])
    
    db: Session = next(get_db())
    try:
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ
        prescription = db.query(Prescription).get(prescription_id)
        if not prescription:
            await bot.send_message(
                callback_query.from_user.id,
                "‚ùå –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
            )
            return
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ —á–∞—Å—Ç–æ—Ç—ã –ø—Ä–∏–µ–º–∞
        reminder_options = generate_reminder_options(prescription)
        
        if not reminder_options:
            await bot.send_message(
                callback_query.from_user.id,
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è"
            )
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–º–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏
        message_text = f"üìã *–ü—Ä–µ–¥–ª–∞–≥–∞–µ–º—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è {prescription.medication_name}*\n\n"
        
        for i, option in enumerate(reminder_options, 1):
            message_text += (
                f"{i}. {option['description']}\n"
                f"‚è∞ –í—Ä–µ–º—è: {option['time']}\n"
                f"üîÑ –ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ: {option['repeat_text']}\n\n"
            )
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
        keyboard = InlineKeyboardMarkup(row_width=1)
        for i, option in enumerate(reminder_options, 1):
            keyboard.add(
                InlineKeyboardButton(
                    f"‚úÖ –î–æ–±–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ {i}",
                    callback_data=f"add_reminder_option_{prescription_id}_{i-1}"
                )
            )
        keyboard.add(
            InlineKeyboardButton("‚úÖ –î–æ–±–∞–≤–∏—Ç—å –≤—Å–µ", callback_data=f"add_all_reminders_{prescription_id}"),
            InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="prescriptions")
        )
        
        await bot.send_message(
            callback_query.from_user.id,
            message_text,
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=keyboard
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {e}")
        await bot.send_message(
            callback_query.from_user.id,
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"
        )
    finally:
        db.close()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ–¥–Ω–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö
@dp.callback_query_handler(lambda c: c.data and c.data.startswith('add_reminder_option_'))
async def add_reminder_option(callback_query: types.CallbackQuery):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö"""
    await bot.answer_callback_query(callback_query.id)
    
    # –ü–æ–ª—É—á–∞–µ–º ID –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∏ –∏–Ω–¥–µ–∫—Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏–∑ callback_data
    parts = callback_query.data.split('_')
    prescription_id = int(parts[-2])
    option_index = int(parts[-1])
    
    db: Session = next(get_db())
    try:
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ
        prescription = db.query(Prescription).get(prescription_id)
        if not prescription:
            await bot.send_message(
                callback_query.from_user.id,
                "‚ùå –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
            )
            return
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
        reminder_options = generate_reminder_options(prescription)
        
        if option_index >= len(reminder_options):
            await bot.send_message(
                callback_query.from_user.id,
                "‚ùå –í—ã–±—Ä–∞–Ω–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
        selected_option = reminder_options[option_index]
        
        # –°–æ–∑–¥–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
        reminder = create_reminder_from_option(db, prescription.child_id, selected_option)
        
        if reminder:
            await bot.send_message(
                callback_query.from_user.id,
                f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ: {selected_option['description']}"
            )
        else:
            await bot.send_message(
                callback_query.from_user.id,
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"
            )
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π
        await process_main_menu(callback_query)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")
        await bot.send_message(
            callback_query.from_user.id,
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"
        )
    finally:
        db.close()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤—Å–µ—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
@dp.callback_query_handler(lambda c: c.data and c.data.startswith('add_all_reminders_'))
async def add_all_reminders(callback_query: types.CallbackQuery):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
    await bot.answer_callback_query(callback_query.id)
    
    # –ü–æ–ª—É—á–∞–µ–º ID –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ callback_data
    prescription_id = int(callback_query.data.split('_')[-1])
    
    db: Session = next(get_db())
    try:
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ
        prescription = db.query(Prescription).get(prescription_id)
        if not prescription:
            await bot.send_message(
                callback_query.from_user.id,
                "‚ùå –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
            )
            return
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
        reminder_options = generate_reminder_options(prescription)
        
        if not reminder_options:
            await bot.send_message(
                callback_query.from_user.id,
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"
            )
            return
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        added_count = 0
        for option in reminder_options:
            if create_reminder_from_option(db, prescription.child_id, option):
                added_count += 1
        
        await bot.send_message(
            callback_query.from_user.id,
            f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {added_count} –∏–∑ {len(reminder_options)}"
        )
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π
        await process_main_menu(callback_query)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {e}")
        await bot.send_message(
            callback_query.from_user.id,
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"
        )
    finally:
        db.close()

def generate_reminder_options(prescription):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç—ã –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ò–ò
    
    Args:
        prescription: –û–±—ä–µ–∫—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
        
    Returns:
        –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
    """
    try:
        # –ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ò–ò –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        if prescription.full_text:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ª–∏ –º—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–æ –∏–ª–∏ –≤—Å–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ
            is_single_medication = len(prescription.full_text.split('\n')) <= 2
            
            if is_single_medication:
                prompt = f"""–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–ª–µ–¥—É—é—â–µ–µ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ª–µ–∫–∞—Ä—Å—Ç–≤–∞ –∏ —Å–æ–∑–¥–∞–π —Å–ø–∏—Å–æ–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è –µ–≥–æ –ø—Ä–∏–µ–º–∞:

–õ–µ–∫–∞—Ä—Å—Ç–≤–æ: {prescription.medication_name}
–î–æ–∑–∏—Ä–æ–≤–∫–∞: {prescription.dosage}
–ß–∞—Å—Ç–æ—Ç–∞ –ø—Ä–∏–µ–º–∞: {prescription.frequency}
–ü–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: {prescription.full_text}

–£—á–∏—Ç—ã–≤–∞–π —Å–ª–µ–¥—É—é—â–∏–µ –ø—Ä–∞–≤–∏–ª–∞:
1. –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –≤—Ä–µ–º—è –ø—Ä–∏–µ–º–∞, –∏—Å–ø–æ–ª—å–∑—É–π –µ–≥–æ
2. –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ "–¥–æ –µ–¥—ã" –∏–ª–∏ "–ø–æ—Å–ª–µ –µ–¥—ã", —É—á–∏—Ç—ã–≤–∞–π —ç—Ç–æ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏
3. –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞ —Å–≤—è–∑—å —Å –ø—Ä–∏–µ–º–∞–º–∏ –ø–∏—â–∏, —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–∏ –ø—Ä–∏–µ–º—ã –Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —á–∞—Å—ã (–∑–∞–≤—Ç—Ä–∞–∫ - 8:00, –æ–±–µ–¥ - 13:00, —É–∂–∏–Ω - 19:00)
4. –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–µ–º–æ–≤ –≤ –¥–µ–Ω—å –±–µ–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏, —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–∏ –ø–æ –¥–Ω—é
5. –î–ª—è "—É—Ç—Ä–æ–º" –∏—Å–ø–æ–ª—å–∑—É–π 8:00, –¥–ª—è "–¥–Ω–µ–º" - 14:00, –¥–ª—è "–≤–µ—á–µ—Ä–æ–º" - 20:00

–í–µ—Ä–Ω–∏ —Å–ø–∏—Å–æ–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:
[
  {{
    "description": "–ü—Ä–∏–Ω—è—Ç—å {prescription.medication_name} {prescription.dosage}",
    "time": "–ß–ß:–ú–ú",
    "repeat_type": "daily/weekly/monthly",
    "repeat_interval": —á–∏—Å–ª–æ,
    "repeat_text": "–µ–∂–µ–¥–Ω–µ–≤–Ω–æ/–µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ/–µ–∂–µ–º–µ—Å—è—á–Ω–æ"
  }}
]

–°–æ–∑–¥–∞–π –æ—Ç 1 –¥–æ 3 –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —á–∞—Å—Ç–æ—Ç—ã –ø—Ä–∏–µ–º–∞."""
            else:
                prompt = f"""–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–ª–µ–¥—É—é—â–µ–µ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∏ —Å–æ–∑–¥–∞–π —Å–ø–∏—Å–æ–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è –ø—Ä–∏–µ–º–∞ –ª–µ–∫–∞—Ä—Å—Ç–≤:

–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ:
{prescription.full_text}

–ü—Ä–µ–ø–∞—Ä–∞—Ç: {prescription.medication_name}
–î–æ–∑–∏—Ä–æ–≤–∫–∞: {prescription.dosage}
–ß–∞—Å—Ç–æ—Ç–∞: {prescription.frequency}

–£—á–∏—Ç—ã–≤–∞–π —Å–ª–µ–¥—É—é—â–∏–µ –ø—Ä–∞–≤–∏–ª–∞:
1. –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –≤—Ä–µ–º—è –ø—Ä–∏–µ–º–∞, –∏—Å–ø–æ–ª—å–∑—É–π –µ–≥–æ
2. –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ "–¥–æ –µ–¥—ã" –∏–ª–∏ "–ø–æ—Å–ª–µ –µ–¥—ã", —É—á–∏—Ç—ã–≤–∞–π —ç—Ç–æ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏
3. –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞ —Å–≤—è–∑—å —Å –ø—Ä–∏–µ–º–∞–º–∏ –ø–∏—â–∏, —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–∏ –ø—Ä–∏–µ–º—ã –Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —á–∞—Å—ã (–∑–∞–≤—Ç—Ä–∞–∫ - 8:00, –æ–±–µ–¥ - 13:00, —É–∂–∏–Ω - 19:00)
4. –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–µ–º–æ–≤ –≤ –¥–µ–Ω—å –±–µ–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏, —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–∏ –ø–æ –¥–Ω—é
5. –î–ª—è "—É—Ç—Ä–æ–º" –∏—Å–ø–æ–ª—å–∑—É–π 8:00, –¥–ª—è "–¥–Ω–µ–º" - 14:00, –¥–ª—è "–≤–µ—á–µ—Ä–æ–º" - 20:00

–í–µ—Ä–Ω–∏ —Å–ø–∏—Å–æ–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:
[
  {{
    "description": "–ü—Ä–∏–Ω—è—Ç—å [–Ω–∞–∑–≤–∞–Ω–∏–µ] [–¥–æ–∑–∏—Ä–æ–≤–∫–∞]",
    "time": "–ß–ß:–ú–ú",
    "repeat_type": "daily/weekly/monthly",
    "repeat_interval": —á–∏—Å–ª–æ,
    "repeat_text": "–µ–∂–µ–¥–Ω–µ–≤–Ω–æ/–µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ/–µ–∂–µ–º–µ—Å—è—á–Ω–æ"
  }}
]

–°–æ–∑–¥–∞–π –æ—Ç 1 –¥–æ 5 –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è."""

            response = openai.ChatCompletion.create(
                model="gpt-3.5-turbo",
                messages=[
                    {"role": "system", "content": "–¢—ã - –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –≤—Ä–∞—á–µ–π –∏ —Å–æ–∑–¥–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–∏–µ–º–∞ –ª–µ–∫–∞—Ä—Å—Ç–≤."},
                    {"role": "user", "content": prompt}
                ],
                temperature=0.3,
                max_tokens=500
            )
            
            result = response['choices'][0]['message']['content'].strip()
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º JSON –∏–∑ –æ—Ç–≤–µ—Ç–∞
            try:
                # –ù–∞—Ö–æ–¥–∏–º –Ω–∞—á–∞–ª–æ –∏ –∫–æ–Ω–µ—Ü JSON
                start_idx = result.find('[')
                end_idx = result.rfind(']') + 1
                
                if start_idx >= 0 and end_idx > start_idx:
                    json_str = result[start_idx:end_idx]
                    options = json.loads(json_str)
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—É—á–∏–ª–∏ —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –Ω—É–∂–Ω—ã–º–∏ –∫–ª—é—á–∞–º–∏
                    valid_options = []
                    for opt in options:
                        if isinstance(opt, dict) and all(k in opt for k in ['description', 'time', 'repeat_type', 'repeat_interval', 'repeat_text']):
                            # –ï—Å–ª–∏ –≤ –æ–ø–∏—Å–∞–Ω–∏–∏ –Ω–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏—è –ª–µ–∫–∞—Ä—Å—Ç–≤–∞, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
                            if prescription.medication_name not in opt['description']:
                                opt['description'] = f"–ü—Ä–∏–Ω—è—Ç—å {prescription.medication_name} {prescription.dosage}"
                            valid_options.append(opt)
                    
                    if valid_options:
                        return valid_options
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ JSON —Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏: {e}")
        
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —á–µ—Ä–µ–∑ –ò–ò –∏–ª–∏ –Ω–µ—Ç –ø–æ–ª–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –ª–æ–≥–∏–∫—É
        options = []
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —á–∞—Å—Ç–æ—Ç—É –ø—Ä–∏–µ–º–∞
        frequency_lower = prescription.frequency.lower()
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª
        repeat_type = 'daily'  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –µ–∂–µ–¥–Ω–µ–≤–Ω–æ
        repeat_interval = 1
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Ä–µ–º—è –ø—Ä–∏–µ–º–∞
        times = []
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —á–∞—Å—Ç–æ—Ç—ã
        if '—Ä–∞–∑ –≤ –¥–µ–Ω—å' in frequency_lower or '—Ä–∞–∑–∞ –≤ –¥–µ–Ω—å' in frequency_lower:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑ –≤ –¥–µ–Ω—å
            match = re.search(r'(\d+)\s*—Ä–∞–∑–∞?\s*–≤\s*–¥–µ–Ω—å', frequency_lower)
            if match:
                times_per_day = int(match.group(1))
                
                # –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∏–µ–º—ã —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ –≤ —Ç–µ—á–µ–Ω–∏–µ –¥–Ω—è
                if times_per_day == 1:
                    times = ['09:00']
                elif times_per_day == 2:
                    times = ['09:00', '21:00']
                elif times_per_day == 3:
                    times = ['08:00', '14:00', '20:00']
                elif times_per_day == 4:
                    times = ['08:00', '12:00', '16:00', '20:00']
                else:
                    # –î–ª—è –¥—Ä—É–≥–∏—Ö —Å–ª—É—á–∞–µ–≤ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ —Å 8 —É—Ç—Ä–∞ –¥–æ 8 –≤–µ—á–µ—Ä–∞
                    start_hour = 8
                    end_hour = 20
                    interval = (end_hour - start_hour) / (times_per_day - 1) if times_per_day > 1 else 0
                    
                    for i in range(times_per_day):
                        hour = int(start_hour + i * interval)
                        times.append(f"{hour:02d}:00")
        
        elif '–∫–∞–∂–¥—ã–π –¥–µ–Ω—å' in frequency_lower or '–µ–∂–µ–¥–Ω–µ–≤–Ω–æ' in frequency_lower:
            times = ['09:00']
        
        elif '—É—Ç—Ä–æ–º' in frequency_lower:
            times = ['08:00']
        
        elif '–¥–Ω–µ–º' in frequency_lower or '–¥–Ω—ë–º' in frequency_lower:
            times = ['14:00']
        
        elif '–≤–µ—á–µ—Ä–æ–º' in frequency_lower:
            times = ['20:00']
        
        elif '—É—Ç—Ä–æ–º –∏ –≤–µ—á–µ—Ä–æ–º' in frequency_lower:
            times = ['08:00', '20:00']
        
        elif '–∫–∞–∂–¥—É—é –Ω–µ–¥–µ–ª—é' in frequency_lower or '–µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ' in frequency_lower or '—Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é' in frequency_lower:
            repeat_type = 'weekly'
            times = ['10:00']
        
        elif '–∫–∞–∂–¥—ã–π –º–µ—Å—è—Ü' in frequency_lower or '–µ–∂–µ–º–µ—Å—è—á–Ω–æ' in frequency_lower or '—Ä–∞–∑ –≤ –º–µ—Å—è—Ü' in frequency_lower:
            repeat_type = 'monthly'
            times = ['10:00']
        
        else:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —á–∞—Å—Ç–æ—Ç—É, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–¥–∏–Ω —Ä–∞–∑ –≤ –¥–µ–Ω—å
            times = ['09:00']
        
        # –°–æ–∑–¥–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
        for time_str in times:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
            repeat_text = "–µ–∂–µ–¥–Ω–µ–≤–Ω–æ"
            if repeat_type == 'weekly':
                repeat_text = "–µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ"
            elif repeat_type == 'monthly':
                repeat_text = "–µ–∂–µ–º–µ—Å—è—á–Ω–æ"
            
            # –°–æ–∑–¥–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
            dosage_text = f" ({prescription.dosage})" if prescription.dosage and prescription.dosage != "–°–º. –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç" else ""
            description = f"–ü—Ä–∏–Ω—è—Ç—å {prescription.medication_name}{dosage_text}"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤–∞—Ä–∏–∞–Ω—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
            options.append({
                'description': description,
                'time': time_str,
                'repeat_type': repeat_type,
                'repeat_interval': repeat_interval,
                'repeat_text': repeat_text
            })
        
        return options
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {e}")
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        return [{
            'description': f"–ü—Ä–∏–Ω—è—Ç—å {prescription.medication_name}",
            'time': '09:00',
            'repeat_type': 'daily',
            'repeat_interval': 1,
            'repeat_text': '–µ–∂–µ–¥–Ω–µ–≤–Ω–æ'
        }]

def create_reminder_from_option(db, child_id, option):
    """
    –°–æ–∑–¥–∞–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–∞
    
    Args:
        db: –°–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        child_id: ID —Ä–µ–±–µ–Ω–∫–∞
        option: –°–ª–æ–≤–∞—Ä—å —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        
    Returns:
        –°–æ–∑–¥–∞–Ω–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
        today = datetime.now().date()
        
        # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è
        hour, minute = map(int, option['time'].split(':'))
        
        # –°–æ–∑–¥–∞–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        reminder_time = datetime.combine(today, datetime.min.time().replace(hour=hour, minute=minute))
        
        # –ï—Å–ª–∏ –≤—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ —Å–µ–≥–æ–¥–Ω—è, –ø–µ—Ä–µ–Ω–æ—Å–∏–º –Ω–∞ –∑–∞–≤—Ç—Ä–∞
        if reminder_time <= datetime.now():
            reminder_time += timedelta(days=1)
        
        # –°–æ–∑–¥–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
        reminder = Reminder(
            child_id=child_id,
            description=option['description'],
            reminder_time=reminder_time,
            status='active',
            repeat_type=option['repeat_type'],
            repeat_interval=option['repeat_interval'],
            created_at=datetime.now(),
            updated_at=datetime.now()
        )
        
        db.add(reminder)
        db.commit()
        
        return reminder
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")
        db.rollback()
        return None

# –ò–º–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–∏ sum –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
from sqlalchemy import func

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤—Å–µ—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∏–∑ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π
@dp.callback_query_handler(lambda c: c.data == 'add_all_prescription_reminders')
async def add_all_prescription_reminders(callback_query: types.CallbackQuery, state: FSMContext):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∏–∑ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π"""
    await bot.answer_callback_query(callback_query.id)
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
    data = await state.get_data()
    options = data.get('prescription_reminder_options', [])
    
    if not options:
        await bot.send_message(
            callback_query.from_user.id,
            "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã –≤–∞—Ä–∏–∞–Ω—Ç—ã –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è"
        )
        return
    
    db: Session = next(get_db())
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–±–µ–Ω–∫–µ
        child = db.query(Child).first()
        if not child:
            await bot.send_message(
                callback_query.from_user.id,
                "‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ —Ä–µ–±–µ–Ω–∫–∞"
            )
            return
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        added_count = 0
        for option in options:
            if create_reminder_from_option(db, child.id, option):
                added_count += 1
        
        await bot.send_message(
            callback_query.from_user.id,
            f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {added_count} –∏–∑ {len(options)}"
        )
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.finish()
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await show_main_menu(callback_query.message)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {e}")
        await bot.send_message(
            callback_query.from_user.id,
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"
        )
    finally:
        db.close()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∏–∑ –≤—Å–µ—Ö –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π
@dp.callback_query_handler(lambda c: c.data == 'create_all_prescription_reminders')
async def create_all_prescription_reminders_handler(callback_query: types.CallbackQuery):
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π"""
    await bot.answer_callback_query(callback_query.id)
    
    db: Session = next(get_db())
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–±–µ–Ω–∫–µ
        child = db.query(Child).first()
        if not child:
            await bot.send_message(
                callback_query.from_user.id,
                "‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ —Ä–µ–±–µ–Ω–∫–∞"
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
        prescriptions = db.query(Prescription).filter(
            Prescription.child_id == child.id,
            Prescription.is_active == 1
        ).all()
        
        if not prescriptions:
            await bot.send_message(
                callback_query.from_user.id,
                "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"
            )
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–º–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏
        message_text = "üìã *–ü—Ä–µ–¥–ª–∞–≥–∞–µ–º—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏–∑ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π*\n\n"
        
        all_options = []
        
        for prescription in prescriptions:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
            options = generate_reminder_options(prescription)
            if options:
                message_text += f"*{prescription.medication_name}*:\n"
                for i, option in enumerate(options, 1):
                    message_text += (
                        f"  {i}. {option['description']}\n"
                        f"  ‚è∞ –í—Ä–µ–º—è: {option['time']}\n"
                        f"  üîÑ –ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ: {option['repeat_text']}\n\n"
                    )
                all_options.extend(options)
        
        if not all_options:
            await bot.send_message(
                callback_query.from_user.id,
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è –≤–∞—à–∏—Ö –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π"
            )
            return
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
        keyboard = InlineKeyboardMarkup(row_width=1)
        keyboard.add(
            InlineKeyboardButton("‚úÖ –î–æ–±–∞–≤–∏—Ç—å –≤—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è", callback_data="add_all_prescription_reminders"),
            InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="prescriptions")
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        state = dp.current_state(user=callback_query.from_user.id)
        await state.update_data(prescription_reminder_options=all_options)
        
        await bot.send_message(
            callback_query.from_user.id,
            message_text,
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=keyboard
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {e}")
        await bot.send_message(
            callback_query.from_user.id,
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"
        )
    finally:
        db.close()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞
@dp.callback_query_handler(lambda c: c.data and c.data.startswith('create_reminders_for_med_'))
async def create_reminders_for_medication(callback_query: types.CallbackQuery, state: FSMContext):
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞ –∏–∑ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è"""
    await bot.answer_callback_query(callback_query.id)
    
    # –ü–æ–ª—É—á–∞–µ–º ID –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∏ –∏–Ω–¥–µ–∫—Å –ª–µ–∫–∞—Ä—Å—Ç–≤–∞ –∏–∑ callback_data
    parts = callback_query.data.split('_')
    prescription_id = int(parts[-2])
    medication_index = int(parts[-1])
    
    db: Session = next(get_db())
    try:
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ
        prescription = db.query(Prescription).get(prescription_id)
        if not prescription:
            await bot.send_message(
                callback_query.from_user.id,
                "‚ùå –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞—Ö –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        user_data = await dp.storage.get_data(user=callback_query.from_user.id)
        medications = user_data.get('medications', [])
        
        if not medications or medication_index >= len(medications):
            await bot.send_message(
                callback_query.from_user.id,
                "‚ùå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ª–µ–∫–∞—Ä—Å—Ç–≤–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–æ
        selected_medication = medications[medication_index]
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —ç—Ç–æ–≥–æ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞
        temp_prescription = Prescription(
            id=prescription.id,
            child_id=prescription.child_id,
            medication_name=selected_medication['name'],
            dosage=selected_medication.get('dosage', ''),
            frequency=selected_medication.get('frequency', '–µ–∂–µ–¥–Ω–µ–≤–Ω–æ'),
            doctor_name=prescription.doctor_name,
            start_date=prescription.start_date,
            end_date=prescription.end_date,
            notes=None,
            full_text=f"{selected_medication['name']} {selected_medication.get('dosage', '')} {selected_medication.get('frequency', '–µ–∂–µ–¥–Ω–µ–≤–Ω–æ')}",
            is_active=1
        )
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è —ç—Ç–æ–≥–æ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞
        reminder_options = generate_reminder_options(temp_prescription)
        
        if not reminder_options:
            await bot.send_message(
                callback_query.from_user.id,
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞"
            )
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–º–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏
        message_text = f"üìã *–ü—Ä–µ–¥–ª–∞–≥–∞–µ–º—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è {selected_medication['name']}*\n\n"
        
        for i, option in enumerate(reminder_options, 1):
            message_text += (
                f"{i}. {option['description']}\n"
                f"‚è∞ –í—Ä–µ–º—è: {option['time']}\n"
                f"üîÑ –ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ: {option['repeat_text']}\n\n"
            )
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
        keyboard = InlineKeyboardMarkup(row_width=1)
        for i, option in enumerate(reminder_options, 1):
            keyboard.add(
                InlineKeyboardButton(
                    f"‚úÖ –î–æ–±–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ {i}",
                    callback_data=f"add_med_reminder_{prescription_id}_{medication_index}_{i-1}"
                )
            )
        keyboard.add(
            InlineKeyboardButton("‚úÖ –î–æ–±–∞–≤–∏—Ç—å –≤—Å–µ", callback_data=f"add_all_med_reminders_{prescription_id}_{medication_index}"),
            InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="prescriptions")
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(med_reminder_options=reminder_options)
        
        await bot.send_message(
            callback_query.from_user.id,
            message_text,
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=keyboard
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è –ª–µ–∫–∞—Ä—Å—Ç–≤–∞: {e}")
        await bot.send_message(
            callback_query.from_user.id,
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"
        )
    finally:
        db.close()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ–¥–Ω–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è –ª–µ–∫–∞—Ä—Å—Ç–≤–∞
@dp.callback_query_handler(lambda c: c.data and c.data.startswith('add_med_reminder_'))
async def add_med_reminder(callback_query: types.CallbackQuery, state: FSMContext):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è –ª–µ–∫–∞—Ä—Å—Ç–≤–∞"""
    await bot.answer_callback_query(callback_query.id)
    
    # –ü–æ–ª—É—á–∞–µ–º ID –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è, –∏–Ω–¥–µ–∫—Å –ª–µ–∫–∞—Ä—Å—Ç–≤–∞ –∏ –∏–Ω–¥–µ–∫—Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏–∑ callback_data
    parts = callback_query.data.split('_')
    prescription_id = int(parts[-3])
    medication_index = int(parts[-2])
    option_index = int(parts[-1])
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    user_data = await dp.storage.get_data(user=callback_query.from_user.id)
    medications = user_data.get('medications', [])
    reminder_options = user_data.get('med_reminder_options', [])
    
    if not medications or medication_index >= len(medications) or not reminder_options or option_index >= len(reminder_options):
        await bot.send_message(
            callback_query.from_user.id,
            "‚ùå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        )
        return
    
    db: Session = next(get_db())
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–±–µ–Ω–∫–µ
        child = db.query(Child).first()
        if not child:
            await bot.send_message(
                callback_query.from_user.id,
                "‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ —Ä–µ–±–µ–Ω–∫–∞"
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
        selected_option = reminder_options[option_index]
        
        # –°–æ–∑–¥–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
        reminder = create_reminder_from_option(db, child.id, selected_option)
        
        if reminder:
            await bot.send_message(
                callback_query.from_user.id,
                f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ: {selected_option['description']}"
            )
        else:
            await bot.send_message(
                callback_query.from_user.id,
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"
            )
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π
        await process_main_menu(callback_query)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")
        await bot.send_message(
            callback_query.from_user.id,
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"
        )
    finally:
        db.close()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤—Å–µ—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è –ª–µ–∫–∞—Ä—Å—Ç–≤–∞
@dp.callback_query_handler(lambda c: c.data and c.data.startswith('add_all_med_reminders_'))
async def add_all_med_reminders(callback_query: types.CallbackQuery, state: FSMContext):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è –ª–µ–∫–∞—Ä—Å—Ç–≤–∞"""
    await bot.answer_callback_query(callback_query.id)
    
    # –ü–æ–ª—É—á–∞–µ–º ID –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∏ –∏–Ω–¥–µ–∫—Å –ª–µ–∫–∞—Ä—Å—Ç–≤–∞ –∏–∑ callback_data
    parts = callback_query.data.split('_')
    prescription_id = int(parts[-2])
    medication_index = int(parts[-1])
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    user_data = await dp.storage.get_data(user=callback_query.from_user.id)
    reminder_options = user_data.get('med_reminder_options', [])
    
    if not reminder_options:
        await bot.send_message(
            callback_query.from_user.id,
            "‚ùå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        )
        return
    
    db: Session = next(get_db())
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–±–µ–Ω–∫–µ
        child = db.query(Child).first()
        if not child:
            await bot.send_message(
                callback_query.from_user.id,
                "‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ —Ä–µ–±–µ–Ω–∫–∞"
            )
            return
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        added_count = 0
        for option in reminder_options:
            if create_reminder_from_option(db, child.id, option):
                added_count += 1
        
        await bot.send_message(
            callback_query.from_user.id,
            f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {added_count} –∏–∑ {len(reminder_options)}"
        )
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π
        await process_main_menu(callback_query)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {e}")
        await bot.send_message(
            callback_query.from_user.id,
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"
        )
    finally:
        db.close()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"
@dp.message_handler(lambda message: message.text == "üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", state="*")
async def back_to_menu(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state:
        await state.finish()
    
    with SessionLocal() as db:
        child = db.query(Child).first()
        if not child:
            await message.answer(
                "–ü–æ—Ö–æ–∂–µ, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–±–µ–Ω–∫–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç. –î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º —Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."
            )
            await ChildRegistrationState.waiting_for_name.set()
            return
        
    await show_main_menu(message)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ó–∞–º–µ—Ç–∫–∏"
@dp.message_handler(lambda message: message.text == "üìã –ó–∞–º–µ—Ç–∫–∏")
async def notes_menu(message: types.Message):
    # –≠—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–µ–Ω, —Ç–∞–∫ –∫–∞–∫ –º—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º InlineKeyboardMarkup
    # –í–º–µ—Å—Ç–æ –Ω–µ–≥–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ callback_query –≤ process_main_menu
    pass

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É"
@dp.message_handler(lambda message: message.text == "üìù –î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É")
async def add_note_start(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard = add_back_button(keyboard)
    
    await NotesState.waiting_for_title.set()
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞–º–µ—Ç–∫–∏:",
        reply_markup=keyboard
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–≤–æ–¥–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∑–∞–º–µ—Ç–∫–∏
@dp.message_handler(state=NotesState.waiting_for_title)
async def process_note_title(message: types.Message, state: FSMContext):
    if message.text == "üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é":
        await back_to_menu(message, state)
        return
    
    async with state.proxy() as data:
        data['note_title'] = message.text
    
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard = add_back_button(keyboard)
    
    await NotesState.waiting_for_content.set()
    await message.answer(
        "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏:",
        reply_markup=keyboard
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–≤–æ–¥–∞ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏
@dp.message_handler(state=NotesState.waiting_for_content)
async def process_note_content(message: types.Message, state: FSMContext):
    if message.text == "üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é":
        await back_to_menu(message, state)
        return
    
    async with state.proxy() as data:
        title = data['note_title']
        content = message.text
    
    with SessionLocal() as db:
        child = db.query(Child).first()
        if not child:
            await message.answer("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–±–µ–Ω–∫–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ —Ä–µ–±–µ–Ω–∫–∞.")
            await state.finish()
            return
        
        note = Note(
            child_id=child.id,
            title=title,
            content=content,
            timestamp=datetime.now()
        )
        
        db.add(note)
        db.commit()
    
    await state.finish()
    
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.row(types.KeyboardButton("üìù –î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É"), types.KeyboardButton("üìã –°–ø–∏—Å–æ–∫ –∑–∞–º–µ—Ç–æ–∫"))
    keyboard = add_back_button(keyboard)
    
    await message.answer(
        f"‚úÖ –ó–∞–º–µ—Ç–∫–∞ \"{title}\" —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!",
        reply_markup=keyboard
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–°–ø–∏—Å–æ–∫ –∑–∞–º–µ—Ç–æ–∫"
@dp.message_handler(lambda message: message.text == "üìã –°–ø–∏—Å–æ–∫ –∑–∞–º–µ—Ç–æ–∫")
async def list_notes(message: types.Message):
    with SessionLocal() as db:
        child = db.query(Child).first()
        if not child:
            await message.answer("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–±–µ–Ω–∫–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ —Ä–µ–±–µ–Ω–∫–∞.")
            return
        
        notes = db.query(Note).filter(Note.child_id == child.id).order_by(Note.timestamp.desc()).all()
        
        if not notes:
            keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
            keyboard.row(types.KeyboardButton("üìù –î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É"))
            keyboard = add_back_button(keyboard)
            
            await message.answer(
                "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∑–∞–º–µ—Ç–æ–∫.",
                reply_markup=keyboard
            )
            return
        
        keyboard = types.InlineKeyboardMarkup(row_width=1)
        for note in notes:
            date_str = note.timestamp.strftime("%d.%m.%Y, %H:%M")
            keyboard.add(types.InlineKeyboardButton(
                text=f"{note.title} ({date_str})",
                callback_data=f"note_{note.id}"
            ))
        
        reply_keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        reply_keyboard.row(types.KeyboardButton("üìù –î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É"))
        reply_keyboard = add_back_button(reply_keyboard)
        
        await message.answer(
            "–°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –∑–∞–º–µ—Ç–æ–∫:",
            reply_markup=keyboard
        )
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=reply_keyboard
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∑–∞–º–µ—Ç–∫–∏ –∏–∑ —Å–ø–∏—Å–∫–∞
@dp.callback_query_handler(lambda c: c.data.startswith('note_'))
async def show_note(callback_query: types.CallbackQuery):
    note_id = int(callback_query.data.split('_')[1])
    
    with SessionLocal() as db:
        note = db.query(Note).filter(Note.id == note_id).first()
        
        if not note:
            await callback_query.answer("–ó–∞–º–µ—Ç–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return
        
        date_str = note.timestamp.strftime("%d.%m.%Y, %H:%M")
        
        keyboard = types.InlineKeyboardMarkup(row_width=2)
        keyboard.add(
            types.InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit_note_{note.id}"),
            types.InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_note_{note.id}")
        )
        
        await callback_query.message.answer(
            f"üìù <b>{note.title}</b>\n"
            f"üìÖ {date_str}\n\n"
            f"{note.content}",
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        
        await callback_query.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏
@dp.callback_query_handler(lambda c: c.data.startswith('delete_note_'))
async def delete_note(callback_query: types.CallbackQuery):
    note_id = int(callback_query.data.split('_')[2])
    
    with SessionLocal() as db:
        note = db.query(Note).filter(Note.id == note_id).first()
        
        if not note:
            await callback_query.answer("–ó–∞–º–µ—Ç–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return
        
        title = note.title
        db.delete(note)
        db.commit()
        
        await callback_query.message.answer(f"‚úÖ –ó–∞–º–µ—Ç–∫–∞ \"{title}\" —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!")
        await callback_query.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏
@dp.callback_query_handler(lambda c: c.data.startswith('edit_note_'))
async def edit_note_start(callback_query: types.CallbackQuery, state: FSMContext):
    note_id = int(callback_query.data.split('_')[2])
    
    with SessionLocal() as db:
        note = db.query(Note).filter(Note.id == note_id).first()
        
        if not note:
            await callback_query.answer("–ó–∞–º–µ—Ç–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return
        
        async with state.proxy() as data:
            data['note_id'] = note.id
            data['note_title'] = note.title
        
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard = add_back_button(keyboard)
        
        await NotesState.waiting_for_edit_content.set()
        await callback_query.message.answer(
            f"–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ \"{note.title}\"\n\n"
            f"–¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç:\n{note.content}\n\n"
            f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏:",
            reply_markup=keyboard
        )
        
        await callback_query.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏
@dp.message_handler(state=NotesState.waiting_for_edit_content)
async def process_edit_note_content(message: types.Message, state: FSMContext):
    if message.text == "üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é":
        await back_to_menu(message, state)
        return
    
    async with state.proxy() as data:
        note_id = data['note_id']
        title = data['note_title']
    
    with SessionLocal() as db:
        note = db.query(Note).filter(Note.id == note_id).first()
        
        if not note:
            await message.answer("–ó–∞–º–µ—Ç–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            await state.finish()
            return
        
        note.content = message.text
        db.commit()
    
    await state.finish()
    
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.row(types.KeyboardButton("üìù –î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É"), types.KeyboardButton("üìã –°–ø–∏—Å–æ–∫ –∑–∞–º–µ—Ç–æ–∫"))
    keyboard = add_back_button(keyboard)
    
    await message.answer(
        f"‚úÖ –ó–∞–º–µ—Ç–∫–∞ \"{title}\" —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!",
        reply_markup=keyboard
    )

# –û–±–Ω–æ–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è AI-–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏, –¥–æ–±–∞–≤–ª—è—è –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é
@dp.message_handler(lambda message: message.text == "ü§ñ AI-–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è")
async def ai_consultation(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard = add_back_button(keyboard)
    
    await message.answer(
        "–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –º–Ω–µ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å –æ –∑–¥–æ—Ä–æ–≤—å–µ –∏ —Ä–∞–∑–≤–∏—Ç–∏–∏ —Ä–µ–±–µ–Ω–∫–∞.\n"
        "–Ø –∏—Å–ø–æ–ª—å–∑—É—é –¥–∞–Ω–Ω—ã–µ –æ –≤–∞—à–µ–º —Ä–µ–±–µ–Ω–∫–µ –∏ –º–µ–¥–∏—Ü–∏–Ω—Å–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –æ—Ç–≤–µ—Ç–∞.\n\n"
        "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å:",
        reply_markup=keyboard
    )

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_main_keyboard():
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("üçº –ö–æ—Ä–º–ª–µ–Ω–∏–µ", callback_data='feeding'),
        InlineKeyboardButton("‚öñÔ∏è –í–µ—Å", callback_data='weight'),
        InlineKeyboardButton("üí© –°—Ç—É–ª", callback_data='stool'),
        InlineKeyboardButton("üíä –õ–µ–∫–∞—Ä—Å—Ç–≤–∞", callback_data='medication'),
        InlineKeyboardButton("üìù –ù–∞–∑–Ω–∞—á–µ–Ω–∏—è", callback_data='prescriptions'),
        InlineKeyboardButton("‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è", callback_data='reminders_menu'),
        InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data='stats'),
        InlineKeyboardButton("üìã –ó–∞–º–µ—Ç–∫–∏", callback_data='notes'),
        InlineKeyboardButton("üìë –¢–∞–±–ª–∏—Ü–∞", callback_data='spreadsheet'),
        InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data='settings')
    )
    return keyboard

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"
def add_back_button(keyboard):
    keyboard.row(types.KeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"))
    return keyboard

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É" –∏–∑ inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
@dp.callback_query_handler(lambda c: c.data == 'add_note')
async def add_note_callback(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard = add_back_button(keyboard)
    
    await NotesState.waiting_for_title.set()
    await bot.send_message(
        callback_query.from_user.id,
        "–í–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞–º–µ—Ç–∫–∏:",
        reply_markup=keyboard
    )

# Function to handle callback for add reminder
@dp.callback_query_handler(lambda c: c.data == 'add_reminder')
async def process_add_reminder(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
    await bot.answer_callback_query(callback_query.id)
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
    from bot.reminders import create_reminder_start
    await create_reminder_start(callback_query)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ—Ä–º–ª–µ–Ω–∏—è
@dp.callback_query_handler(lambda c: c.data == 'add_feeding')
async def process_add_feeding(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ—Ä–º–ª–µ–Ω–∏—è"""
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(
        callback_query.from_user.id,
        "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–ª–æ–∫–∞ –≤ –º–∏–ª–ª–∏–ª–∏—Ç—Ä–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä: 80):"
    )
    await FeedingState.waiting_for_amount.set()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∏–∑ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π —Å –ø–æ–º–æ—â—å—é AI
@dp.callback_query_handler(lambda c: c.data == 'create_reminders_from_prescriptions')
async def create_reminders_from_prescriptions(callback_query: types.CallbackQuery):
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π —Å –ø–æ–º–æ—â—å—é AI"""
    await bot.answer_callback_query(callback_query.id)
    
    db: Session = next(get_db())
    try:
        child = db.query(Child).first()
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
        prescriptions = db.query(Prescription).filter(
            Prescription.child_id == child.id,
            Prescription.is_active == 1
        ).all()
        
        if not prescriptions:
            await bot.send_message(
                callback_query.from_user.id,
                "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π."
            )
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        await bot.send_message(
            callback_query.from_user.id,
            "ü§ñ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∏ —Å–æ–∑–¥–∞—é –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è..."
        )
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º —Å –ø–æ–º–æ—â—å—é AI
        reminders_suggestions = ai_assistant.generate_prescription_reminders(db)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        keyboard = InlineKeyboardMarkup(row_width=1)
        keyboard.add(
            InlineKeyboardButton("‚úÖ –°–æ–∑–¥–∞—Ç—å –≤—Å–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–µ", callback_data='create_all_suggested_reminders'),
            InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è–º", callback_data='prescriptions')
        )
        
        await bot.send_message(
            callback_query.from_user.id,
            f"üìã *AI –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —Å–æ–∑–¥–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:*\n\n{reminders_suggestions}",
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=keyboard
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∏–∑ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π: {e}")
        await bot.send_message(
            callback_query.from_user.id,
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π."
        )
    finally:
        db.close()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –æ —Å—Ç—É–ª–µ
@dp.callback_query_handler(lambda c: c.data == 'add_stool')
async def process_add_stool(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –æ —Å—Ç—É–ª–µ"""
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(
        callback_query.from_user.id,
        "üí© –û–ø–∏—à–∏—Ç–µ —Å—Ç—É–ª —Ä–µ–±–µ–Ω–∫–∞ (—Ü–≤–µ—Ç, –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ü–∏—è):"
    )
    await StoolState.waiting_for_description.set()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–µ—Å–∞
@dp.callback_query_handler(lambda c: c.data == 'add_weight')
async def process_add_weight(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–µ—Å–∞"""
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(
        callback_query.from_user.id,
        "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—É—â–∏–π –≤–µ—Å –≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä: 8.5):"
    )
    await WeightState.waiting_for_weight.set()

if __name__ == '__main__':
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    executor.start_polling(dp, skip_updates=True) 