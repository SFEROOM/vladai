"""
–ú–æ–¥—É–ª—å –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
"""
from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ParseMode
from datetime import datetime, timedelta
import logging
from sqlalchemy.orm import Session
import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from database.database import get_db
from database.models import Reminder
from bot.bot import bot, dp, ReminderState

logger = logging.getLogger(__name__)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
@dp.callback_query_handler(lambda c: c.data.startswith('edit_description_'))
async def edit_description_start(callback_query: types.CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è"""
    reminder_id = int(callback_query.data.split('_')[2])
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(reminder_id=reminder_id)
    
    db: Session = next(get_db())
    try:
        reminder = db.query(Reminder).get(reminder_id)
        if not reminder:
            await bot.answer_callback_query(callback_query.id, "‚ùå –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return
            
        await bot.send_message(
            callback_query.from_user.id,
            f"üìù *–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è*\n\n"
            f"–¢–µ–∫—É—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ: {reminder.description}\n\n"
            f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:",
            parse_mode=ParseMode.MARKDOWN
        )
        
        await ReminderState.waiting_for_new_description.set()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è: {e}")
        await bot.answer_callback_query(
            callback_query.id,
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏"
        )
    finally:
        db.close()

@dp.message_handler(state=ReminderState.waiting_for_new_description)
async def process_new_description(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è"""
    new_description = message.text.strip()
    if len(new_description) < 3:
        await message.reply("‚ùå –û–ø–∏—Å–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
    
    data = await state.get_data()
    reminder_id = data.get('reminder_id')
    
    db: Session = next(get_db())
    try:
        reminder = db.query(Reminder).get(reminder_id)
        if not reminder:
            await message.reply("‚ùå –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            await state.finish()
            return
            
        # –û–±–Ω–æ–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
        old_description = reminder.description
        reminder.description = new_description
        db.commit()
        
        await message.reply(
            f"‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!\n\n"
            f"–ë—ã–ª–æ: {old_description}\n"
            f"–°—Ç–∞–ª–æ: {new_description}"
        )
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
        await show_reminder_after_edit(message, reminder_id)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ–ø–∏—Å–∞–Ω–∏—è: {e}")
        await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ–ø–∏—Å–∞–Ω–∏—è")
    finally:
        db.close()
        await state.finish()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
@dp.callback_query_handler(lambda c: c.data.startswith('edit_time_'))
async def edit_time_start(callback_query: types.CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏"""
    reminder_id = int(callback_query.data.split('_')[2])
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(reminder_id=reminder_id)
    
    db: Session = next(get_db())
    try:
        reminder = db.query(Reminder).get(reminder_id)
        if not reminder:
            await bot.answer_callback_query(callback_query.id, "‚ùå –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return
            
        await bot.send_message(
            callback_query.from_user.id,
            f"‚è∞ *–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏*\n\n"
            f"–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {reminder.reminder_time.strftime('%d.%m.%Y %H:%M')}\n\n"
            f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú\n"
            f"–ù–∞–ø—Ä–∏–º–µ—Ä: 01.08.2023 14:30\n\n"
            f"–ò–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è —á–µ—Ä–µ–∑ —Å–∫–æ–ª—å–∫–æ –Ω–∞–ø–æ–º–Ω–∏—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ +–ß–ß:–ú–ú\n"
            f"–ù–∞–ø—Ä–∏–º–µ—Ä: +01:30 (—á–µ—Ä–µ–∑ 1 —á–∞—Å 30 –º–∏–Ω—É—Ç)",
            parse_mode=ParseMode.MARKDOWN
        )
        
        await ReminderState.waiting_for_new_time.set()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏: {e}")
        await bot.answer_callback_query(
            callback_query.id,
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏"
        )
    finally:
        db.close()

@dp.message_handler(state=ReminderState.waiting_for_new_time)
async def process_new_time(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏"""
    time_str = message.text.strip()
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ —ç—Ç–æ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è (+–ß–ß:–ú–ú)
        if time_str.startswith('+'):
            time_parts = time_str[1:].split(':')
            hours = int(time_parts[0])
            minutes = int(time_parts[1]) if len(time_parts) > 1 else 0
            
            new_time = datetime.now() + timedelta(hours=hours, minutes=minutes)
        else:
            # –ê–±—Å–æ–ª—é—Ç–Ω–æ–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú
            new_time = datetime.strptime(time_str, "%d.%m.%Y %H:%M")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –≤—Ä–µ–º—è –≤ –±—É–¥—É—â–µ–º
            if new_time <= datetime.now():
                await message.reply("‚ùå –í—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
                return
    except ValueError:
        await message.reply(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú –∏–ª–∏ +–ß–ß:–ú–ú. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
        )
        return
    
    data = await state.get_data()
    reminder_id = data.get('reminder_id')
    
    db: Session = next(get_db())
    try:
        reminder = db.query(Reminder).get(reminder_id)
        if not reminder:
            await message.reply("‚ùå –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            await state.finish()
            return
            
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è
        old_time = reminder.reminder_time
        reminder.reminder_time = new_time
        db.commit()
        
        await message.reply(
            f"‚úÖ –í—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–æ!\n\n"
            f"–ë—ã–ª–æ: {old_time.strftime('%d.%m.%Y %H:%M')}\n"
            f"–°—Ç–∞–ª–æ: {new_time.strftime('%d.%m.%Y %H:%M')}"
        )
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
        await show_reminder_after_edit(message, reminder_id)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏: {e}")
        await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏")
    finally:
        db.close()
        await state.finish()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–∏–ø–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
@dp.callback_query_handler(lambda c: c.data.startswith('edit_repeat_type_'))
async def edit_repeat_type_start(callback_query: types.CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–∏–ø–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è"""
    reminder_id = int(callback_query.data.split('_')[3])
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(reminder_id=reminder_id)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ç–∏–ø–∞–º–∏ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("üîÇ –û–¥–Ω–æ–∫—Ä–∞—Ç–Ω–æ", callback_data='new_repeat_once'),
        InlineKeyboardButton("üîÑ –ï–∂–µ–¥–Ω–µ–≤–Ω–æ", callback_data='new_repeat_daily'),
        InlineKeyboardButton("üìÖ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ", callback_data='new_repeat_weekly'),
        InlineKeyboardButton("üìÜ –ï–∂–µ–º–µ—Å—è—á–Ω–æ", callback_data='new_repeat_monthly')
    )
    
    await bot.send_message(
        callback_query.from_user.id,
        "üîÑ *–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–∏–ø–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è*\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–∏–ø –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è:",
        reply_markup=keyboard,
        parse_mode=ParseMode.MARKDOWN
    )
    
    await ReminderState.waiting_for_new_repeat_type.set()

@dp.callback_query_handler(lambda c: c.data.startswith('new_repeat_'), state=ReminderState.waiting_for_new_repeat_type)
async def process_new_repeat_type(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ —Ç–∏–ø–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è"""
    new_repeat_type = callback_query.data.split('_')[2]  # once, daily, weekly, monthly
    
    data = await state.get_data()
    reminder_id = data.get('reminder_id')
    
    db: Session = next(get_db())
    try:
        reminder = db.query(Reminder).get(reminder_id)
        if not reminder:
            await bot.answer_callback_query(callback_query.id, "‚ùå –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            await state.finish()
            return
            
        # –ï—Å–ª–∏ –º–µ–Ω—è–µ–º –Ω–∞ –æ–¥–Ω–æ–∫—Ä–∞—Ç–Ω–æ–µ, —Å—Ä–∞–∑—É –æ–±–Ω–æ–≤–ª—è–µ–º
        if new_repeat_type == 'once':
            old_repeat_type = reminder.repeat_type
            reminder.repeat_type = new_repeat_type
            db.commit()
            
            await bot.send_message(
                callback_query.from_user.id,
                f"‚úÖ –¢–∏–ø –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ '–û–¥–Ω–æ–∫—Ä–∞—Ç–Ω–æ'!"
            )
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
            await show_reminder_after_edit(callback_query.message, reminder_id)
            await state.finish()
        else:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π —Ç–∏–ø –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
            await state.update_data(new_repeat_type=new_repeat_type)
            
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª
            await bot.send_message(
                callback_query.from_user.id,
                f"üìä –í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è (–∫–∞–∂–¥—ã–µ N {'–¥–Ω–µ–π' if new_repeat_type == 'daily' else '–Ω–µ–¥–µ–ª—å' if new_repeat_type == 'weekly' else '–º–µ—Å—è—Ü–µ–≤'}):"
            )
            
            await ReminderState.waiting_for_new_repeat_interval.set()
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–∏–ø–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è: {e}")
        await bot.answer_callback_query(
            callback_query.id,
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–∏–ø–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è"
        )
        await state.finish()
    finally:
        db.close()

@dp.message_handler(state=ReminderState.waiting_for_new_repeat_interval)
async def process_new_repeat_interval(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è"""
    try:
        new_interval = int(message.text.strip())
        if new_interval <= 0:
            await message.reply("‚ùå –ò–Ω—Ç–µ—Ä–≤–∞–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
            return
            
        data = await state.get_data()
        reminder_id = data.get('reminder_id')
        new_repeat_type = data.get('new_repeat_type')
        
        db: Session = next(get_db())
        try:
            reminder = db.query(Reminder).get(reminder_id)
            if not reminder:
                await message.reply("‚ùå –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                await state.finish()
                return
                
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∏–ø –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª
            old_repeat_type = reminder.repeat_type
            old_interval = reminder.repeat_interval
            
            reminder.repeat_type = new_repeat_type
            reminder.repeat_interval = new_interval
            db.commit()
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Ç–∏–ø–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
            repeat_text = {
                'daily': '–ï–∂–µ–¥–Ω–µ–≤–Ω–æ',
                'weekly': '–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ',
                'monthly': '–ï–∂–µ–º–µ—Å—è—á–Ω–æ'
            }
            
            await message.reply(
                f"‚úÖ –¢–∏–ø –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω!\n\n"
                f"–ë—ã–ª–æ: {repeat_text.get(old_repeat_type, '–û–¥–Ω–æ–∫—Ä–∞—Ç–Ω–æ')} "
                f"(–∏–Ω—Ç–µ—Ä–≤–∞–ª: {old_interval if old_repeat_type != 'once' else '–ù/–î'})\n"
                f"–°—Ç–∞–ª–æ: {repeat_text.get(new_repeat_type)} (–∏–Ω—Ç–µ—Ä–≤–∞–ª: {new_interval})"
            )
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
            await show_reminder_after_edit(message, reminder_id)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è: {e}")
            await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è")
        finally:
            db.close()
            await state.finish()
    except ValueError:
        await message.reply("‚ùå –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
@dp.callback_query_handler(lambda c: c.data.startswith('edit_repeat_interval_'))
async def edit_repeat_interval_start(callback_query: types.CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è"""
    reminder_id = int(callback_query.data.split('_')[3])
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(reminder_id=reminder_id)
    
    db: Session = next(get_db())
    try:
        reminder = db.query(Reminder).get(reminder_id)
        if not reminder:
            await bot.answer_callback_query(callback_query.id, "‚ùå –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–≤—Ç–æ—Ä—è—é—â–µ–µ—Å—è
        if reminder.repeat_type == 'once':
            await bot.send_message(
                callback_query.from_user.id,
                "‚ùå –ù–µ–ª—å–∑—è –∏–∑–º–µ–Ω–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è –æ–¥–Ω–æ–∫—Ä–∞—Ç–Ω–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.\n"
                "–°–Ω–∞—á–∞–ª–∞ –∏–∑–º–µ–Ω–∏—Ç–µ —Ç–∏–ø –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è."
            )
            return
            
        repeat_type_text = {
            'daily': '–¥–Ω–µ–π',
            'weekly': '–Ω–µ–¥–µ–ª—å',
            'monthly': '–º–µ—Å—è—Ü–µ–≤'
        }
        
        await bot.send_message(
            callback_query.from_user.id,
            f"üìä *–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è*\n\n"
            f"–¢–µ–∫—É—â–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª: –∫–∞–∂–¥—ã–µ {reminder.repeat_interval} {repeat_type_text.get(reminder.repeat_type)}\n\n"
            f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª (—Ü–µ–ª–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ):",
            parse_mode=ParseMode.MARKDOWN
        )
        
        await ReminderState.waiting_for_new_repeat_interval.set()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞: {e}")
        await bot.answer_callback_query(
            callback_query.id,
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏"
        )
    finally:
        db.close()

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ—Å–ª–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
async def show_reminder_after_edit(message, reminder_id):
    """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ—Å–ª–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    db: Session = next(get_db())
    try:
        reminder = db.query(Reminder).get(reminder_id)
        if not reminder:
            await message.reply("‚ùå –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return
            
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–∏
        status_text = "‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ" if reminder.status == 'completed' else "‚è≥ –ê–∫—Ç–∏–≤–Ω–æ" if reminder.status == 'active' else "‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ"
        repeat_text = "–û–¥–Ω–æ–∫—Ä–∞—Ç–Ω–æ–µ" if reminder.repeat_type == 'once' else f"–ü–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è –∫–∞–∂–¥—ã–µ {reminder.repeat_interval} "
        
        if reminder.repeat_type == 'daily':
            repeat_text += "–¥–µ–Ω—å(–¥–Ω–µ–π)"
        elif reminder.repeat_type == 'weekly':
            repeat_text += "–Ω–µ–¥–µ–ª—é(–Ω–µ–¥–µ–ª—å)"
        elif reminder.repeat_type == 'monthly':
            repeat_text += "–º–µ—Å—è—Ü(–µ–≤)"
            
        reminder_info = f"""üìù *{reminder.description}*

‚è∞ –í—Ä–µ–º—è: {reminder.reminder_time.strftime('%d.%m.%Y %H:%M')}
üîÑ –ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ: {repeat_text}
üìä –°—Ç–∞—Ç—É—Å: {status_text}
"""
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        keyboard = InlineKeyboardMarkup(row_width=2)
        
        # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
        if reminder.status == 'active':
            keyboard.row(
                InlineKeyboardButton("‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ", callback_data=f'reminder_complete_{reminder_id}'),
                InlineKeyboardButton("‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data=f'reminder_skip_{reminder_id}')
            )
        
        # –ö–Ω–æ–ø–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —É–¥–∞–ª–µ–Ω–∏—è
        keyboard.row(
            InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f'reminder_edit_{reminder_id}'),
            InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=f'reminder_delete_{reminder_id}')
        )
        
        # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        keyboard.row(
            InlineKeyboardButton("üìù –í—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è", callback_data='reminders_list'),
            InlineKeyboardButton("üîô –í –º–µ–Ω—é", callback_data='reminders_menu')
        )
        
        await message.reply(
            reminder_info,
            reply_markup=keyboard,
            parse_mode=ParseMode.MARKDOWN
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")
        await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")
    finally:
        db.close()

# –ò–º–ø–æ—Ä—Ç –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
from bot.reminders import show_reminders_list 