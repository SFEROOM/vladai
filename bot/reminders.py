"""
–ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏
"""
from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ParseMode
from datetime import datetime, timedelta
import logging
import re
from sqlalchemy.orm import Session
import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from database.database import get_db
from database.models import Reminder, Child
from bot.bot import bot, dp, ReminderState

logger = logging.getLogger(__name__)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
@dp.callback_query_handler(lambda c: c.data == 'reminder_create')
async def create_reminder_start(callback_query: types.CallbackQuery):
    """–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(
        callback_query.from_user.id,
        "üìù *–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è*\n\n"
        "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: '–ü—Ä–∏–Ω—è—Ç—å –ª–µ–∫–∞—Ä—Å—Ç–≤–æ', '–ü–æ—Å–µ—Ç–∏—Ç—å –≤—Ä–∞—á–∞'):",
        parse_mode=ParseMode.MARKDOWN
    )
    await ReminderState.waiting_for_description.set()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–ø–∏—Å–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
@dp.message_handler(state=ReminderState.waiting_for_description)
async def process_reminder_description(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
    description = message.text.strip()
    if len(description) < 3:
        await message.reply("‚ùå –û–ø–∏—Å–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
    
    await state.update_data(description=description)
    await message.reply(
        "‚è∞ –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–ø–æ –ú–°–ö)\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: 13:00"
    )
    await ReminderState.waiting_for_time.set()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
@dp.message_handler(state=ReminderState.waiting_for_time)
async def process_reminder_time(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
    time_str = message.text.strip()
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ –ß–ß:–ú–ú
        time_obj = datetime.strptime(time_str, "%H:%M").time()
        
        # –°–æ–∑–¥–∞–µ–º –¥–∞—Ç—É —Å —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–º –¥–Ω–µ–º –∏ —É–∫–∞–∑–∞–Ω–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º
        now = datetime.now()
        reminder_time = datetime.combine(now.date(), time_obj)
        
        # –ï—Å–ª–∏ –≤—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ —Å–µ–≥–æ–¥–Ω—è, –ø–µ—Ä–µ–Ω–æ—Å–∏–º –Ω–∞ –∑–∞–≤—Ç—Ä–∞
        if reminder_time <= now:
            reminder_time = reminder_time + timedelta(days=1)
            
        await state.update_data(reminder_time=reminder_time)
        
        # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –æ —Ç–∏–ø–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
        keyboard = InlineKeyboardMarkup(row_width=2)
        keyboard.add(
            InlineKeyboardButton("üîÇ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–∞—è –¥–∞—Ç–∞", callback_data='repeat_once'),
            InlineKeyboardButton("üîÑ –ö–∞–∂–¥—ã–π –¥–µ–Ω—å", callback_data='repeat_daily')
        )
        
        await message.reply(
            "üîÑ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:",
            reply_markup=keyboard
        )
        await ReminderState.waiting_for_repeat_type.set()
        
    except ValueError:
        await message.reply(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä: 13:00). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
        )
        return

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–∏–ø–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
@dp.callback_query_handler(lambda c: c.data.startswith('repeat_'), state=ReminderState.waiting_for_repeat_type)
async def process_reminder_repeat_type(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∏–ø–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è"""
    repeat_type = callback_query.data.split('_')[1]  # once –∏–ª–∏ daily
    await state.update_data(repeat_type=repeat_type)
    
    if repeat_type == 'once':
        # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–∞—è –¥–∞—Ç–∞, —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞—Ç—É
        await bot.send_message(
            callback_query.from_user.id,
            "üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 01.08.2023"
        )
        await ReminderState.waiting_for_date.set()
    else:
        # –ï—Å–ª–∏ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª 1 –∏ —Å–æ–∑–¥–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
        await state.update_data(repeat_interval=1)
        await create_reminder(callback_query, state)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∞—Ç—ã –¥–ª—è –æ–¥–Ω–æ–∫—Ä–∞—Ç–Ω–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
@dp.message_handler(state=ReminderState.waiting_for_date)
async def process_reminder_date(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç—ã –¥–ª—è –æ–¥–Ω–æ–∫—Ä–∞—Ç–Ω–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
    date_str = message.text.strip()
    
    try:
        # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É
        date_obj = datetime.strptime(date_str, "%d.%m.%Y").date()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞—Ç–∞ –Ω–µ –≤ –ø—Ä–æ—à–ª–æ–º
        if date_obj < datetime.now().date():
            await message.reply("‚ùå –î–∞—Ç–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è
        data = await state.get_data()
        reminder_time = data['reminder_time']
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –¥–∞—Ç—É —Å —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–∞—Ç–æ–π –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º
        new_reminder_time = datetime.combine(date_obj, reminder_time.time())
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        await state.update_data(reminder_time=new_reminder_time)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª 1 –¥–ª—è –æ–¥–Ω–æ–∫—Ä–∞—Ç–Ω–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        await state.update_data(repeat_interval=1)
        
        # –°–æ–∑–¥–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
        await create_reminder(message, state)
        
    except ValueError:
        await message.reply(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä: 01.08.2023). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
        )
        return

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
@dp.message_handler(state=ReminderState.waiting_for_repeat_interval)
async def process_reminder_interval(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è"""
    try:
        interval = int(message.text.strip())
        if interval <= 0:
            await message.reply("‚ùå –ò–Ω—Ç–µ—Ä–≤–∞–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
            return
            
        await state.update_data(repeat_interval=interval)
        await create_reminder(message, state)
    except ValueError:
        await message.reply("‚ùå –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")

# –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
async def create_reminder(message_or_callback, state: FSMContext):
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    user_id = message_or_callback.from_user.id if isinstance(message_or_callback, types.Message) else message_or_callback.from_user.id
    
    data = await state.get_data()
    description = data.get('description')
    reminder_time = data.get('reminder_time')
    repeat_type = data.get('repeat_type', 'once')
    repeat_interval = data.get('repeat_interval', 1)
    
    db: Session = next(get_db())
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–±–µ–Ω–∫–∞
        child = db.query(Child).first()
        if not child:
            await bot.send_message(user_id, "‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ —Ä–µ–±–µ–Ω–∫–∞")
            await state.finish()
            return
            
        # –°–æ–∑–¥–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
        reminder = Reminder(
            child_id=child.id,
            description=description,
            reminder_time=reminder_time,
            status='active',
            repeat_type=repeat_type,
            repeat_interval=repeat_interval
        )
        
        db.add(reminder)
        db.commit()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
        repeat_text = "–æ–¥–Ω–æ–∫—Ä–∞—Ç–Ω–æ–µ"
        if repeat_type == 'daily':
            repeat_text = f"–∫–∞–∂–¥—ã–µ {repeat_interval} –¥–µ–Ω—å(–¥–Ω–µ–π)"
        elif repeat_type == 'weekly':
            repeat_text = f"–∫–∞–∂–¥—ã–µ {repeat_interval} –Ω–µ–¥–µ–ª—é(–Ω–µ–¥–µ–ª—å)"
        elif repeat_type == 'monthly':
            repeat_text = f"–∫–∞–∂–¥—ã–µ {repeat_interval} –º–µ—Å—è—Ü(–µ–≤)"
            
        success_message = f"""‚úÖ *–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ!*

üìù –û–ø–∏—Å–∞–Ω–∏–µ: {description}
‚è∞ –í—Ä–µ–º—è: {reminder_time.strftime('%d.%m.%Y %H:%M')}
üîÑ –ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ: {repeat_text}
"""
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π
        keyboard = InlineKeyboardMarkup()
        keyboard.row(
            InlineKeyboardButton("üìù –í—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è", callback_data='reminders_list'),
            InlineKeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å –µ—â–µ", callback_data='reminder_create')
        )
        keyboard.add(InlineKeyboardButton("üîô –í –º–µ–Ω—é", callback_data='reminders_menu'))
        
        await bot.send_message(
            user_id,
            success_message,
            reply_markup=keyboard,
            parse_mode=ParseMode.MARKDOWN
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")
        await bot.send_message(
            user_id,
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
    finally:
        db.close()
        await state.finish()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–≥–æ
@dp.callback_query_handler(lambda c: c.data.startswith('reminder_complete_'))
async def complete_reminder(callback_query: types.CallbackQuery):
    """–û—Ç–º–µ—Ç–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–≥–æ"""
    reminder_id = int(callback_query.data.split('_')[2])
    
    db: Session = next(get_db())
    try:
        reminder = db.query(Reminder).get(reminder_id)
        if not reminder:
            await bot.answer_callback_query(callback_query.id, "‚ùå –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return
            
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        reminder.status = 'completed'
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–≤—è–∑–∞–Ω–æ –ª–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å –ø—Ä–∏–µ–º–æ–º –ª–µ–∫–∞—Ä—Å—Ç–≤–∞
        medication_keywords = ['–ª–µ–∫–∞—Ä—Å—Ç–≤–æ', '—Ç–∞–±–ª–µ—Ç–∫–∞', '—Ç–∞–±–ª–µ—Ç–∫–∏', '–ø—Ä–∏–µ–º', '–ø—Ä–∏–Ω—è—Ç—å', '–≤—ã–ø–∏—Ç—å', 
                             '–ª–µ–∫–∞—Ä—Å—Ç–≤–∞', '–ø—Ä–µ–ø–∞—Ä–∞—Ç', '–∫–∞–ø–ª–∏', '—Å–∏—Ä–æ–ø', '–∞–Ω—Ç–∏–±–∏–æ—Ç–∏–∫']
        
        is_medication_reminder = any(keyword in reminder.description.lower() for keyword in medication_keywords)
        
        # –ï—Å–ª–∏ —ç—Ç–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –ª–µ–∫–∞—Ä—Å—Ç–≤–µ, –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –ø—Ä–∏–µ–º –ª–µ–∫–∞—Ä—Å—Ç–≤–∞
        if is_medication_reminder:
            try:
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞ –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
                # –ü—Ä–æ—Å—Ç–∞—è —ç–≤—Ä–∏—Å—Ç–∏–∫–∞: –±–µ—Ä–µ–º –ø–µ—Ä–≤–æ–µ —Å–ª–æ–≤–æ –ø–æ—Å–ª–µ –≥–ª–∞–≥–æ–ª–∞ "–ø—Ä–∏–Ω—è—Ç—å", "–≤—ã–ø–∏—Ç—å" –∏ —Ç.–¥.
                description_lower = reminder.description.lower()
                medication_name = reminder.description  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤—Å—ë –æ–ø–∏—Å–∞–Ω–∏–µ
                dosage = "–ò–∑ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"
                
                # –ò—â–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏ –∏–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞
                for verb in ['–ø—Ä–∏–Ω—è—Ç—å', '–≤—ã–ø–∏—Ç—å', '–¥–∞—Ç—å']:
                    if verb in description_lower:
                        parts = description_lower.split(verb)
                        if len(parts) > 1:
                            # –ë–µ—Ä–µ–º –ø–µ—Ä–≤–æ–µ —Å–ª–æ–≤–æ –ø–æ—Å–ª–µ –≥–ª–∞–≥–æ–ª–∞
                            medication_name = parts[1].strip().split()[0].capitalize()
                            break
                
                # –ò—â–µ–º –¥–æ–∑–∏—Ä–æ–≤–∫—É (–æ–±—ã—á–Ω–æ –ø–æ—Å–ª–µ –Ω–∞–∑–≤–∞–Ω–∏—è –ª–µ–∫–∞—Ä—Å—Ç–≤–∞)
                dosage_keywords = ['–º–≥', '–º–ª', '—Ç–∞–±–ª–µ—Ç–∫—É', '—Ç–∞–±–ª–µ—Ç–∫–∏', '–∫–∞–ø–ª–∏', '–ª–æ–∂–∫—É', '–ª–æ–∂–∫–∏']
                for keyword in dosage_keywords:
                    if keyword in description_lower:
                        # –ò—â–µ–º —á–∏—Å–ª–æ –ø–µ—Ä–µ–¥ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–æ–º
                        match = re.search(r'(\d+)\s*' + keyword, description_lower)
                        if match:
                            dosage = f"{match.group(1)} {keyword}"
                            break
                
                # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥–µ–ª—å Medication
                from database.models import Medication
                
                # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –ø—Ä–∏–µ–º–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞
                medication = Medication(
                    child_id=reminder.child_id,
                    medication_name=medication_name,
                    dosage=dosage,
                    timestamp=datetime.now()
                )
                db.add(medication)
                
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –∑–∞–ø–∏—Å–∏ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞
                await bot.send_message(
                    callback_query.from_user.id,
                    f"‚úÖ –ü—Ä–∏–µ–º –ª–µ–∫–∞—Ä—Å—Ç–≤–∞ '{medication_name}' ({dosage}) –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø–∏—Å–∞–Ω"
                )
            except Exception as med_error:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –ø—Ä–∏–µ–º–∞ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞: {med_error}")
        
        # –ï—Å–ª–∏ —ç—Ç–æ –ø–æ–≤—Ç–æ—Ä—è—é—â–µ–µ—Å—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ, —Å–æ–∑–¥–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–µ
        if reminder.repeat_type != 'once':
            next_time = None
            
            if reminder.repeat_type == 'daily':
                next_time = reminder.reminder_time + timedelta(days=reminder.repeat_interval)
            elif reminder.repeat_type == 'weekly':
                next_time = reminder.reminder_time + timedelta(weeks=reminder.repeat_interval)
            elif reminder.repeat_type == 'monthly':
                # –ü—Ä–æ—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è –º–µ—Å—è—Ü–µ–≤ (–Ω–µ —É—á–∏—Ç—ã–≤–∞–µ—Ç —Ä–∞–∑–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π)
                next_month = reminder.reminder_time.month + reminder.repeat_interval
                next_year = reminder.reminder_time.year + (next_month - 1) // 12
                next_month = ((next_month - 1) % 12) + 1
                
                # –°–æ–∑–¥–∞–µ–º –¥–∞—Ç—É —Å–ª–µ–¥—É—é—â–µ–≥–æ –º–µ—Å—è—Ü–∞
                next_time = reminder.reminder_time.replace(year=next_year, month=next_month)
            
            if next_time:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
                new_reminder = Reminder(
                    child_id=reminder.child_id,
                    description=reminder.description,
                    reminder_time=next_time,
                    status='active',
                    repeat_type=reminder.repeat_type,
                    repeat_interval=reminder.repeat_interval
                )
                db.add(new_reminder)
        
        db.commit()
        
        await bot.answer_callback_query(callback_query.id, "‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
        await show_reminders_list(callback_query)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")
        await bot.answer_callback_query(
            callback_query.id,
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"
        )
    finally:
        db.close()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
@dp.callback_query_handler(lambda c: c.data.startswith('reminder_skip_'))
async def skip_reminder(callback_query: types.CallbackQuery):
    """–ü—Ä–æ–ø—É—Å–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
    reminder_id = int(callback_query.data.split('_')[2])
    
    db: Session = next(get_db())
    try:
        reminder = db.query(Reminder).get(reminder_id)
        if not reminder:
            await bot.answer_callback_query(callback_query.id, "‚ùå –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return
            
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        reminder.status = 'skipped'
        
        # –ï—Å–ª–∏ —ç—Ç–æ –ø–æ–≤—Ç–æ—Ä—è—é—â–µ–µ—Å—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ, —Å–æ–∑–¥–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–µ (–∫–∞–∫ –∏ –≤ complete_reminder)
        if reminder.repeat_type != 'once':
            next_time = None
            
            if reminder.repeat_type == 'daily':
                next_time = reminder.reminder_time + timedelta(days=reminder.repeat_interval)
            elif reminder.repeat_type == 'weekly':
                next_time = reminder.reminder_time + timedelta(weeks=reminder.repeat_interval)
            elif reminder.repeat_type == 'monthly':
                next_month = reminder.reminder_time.month + reminder.repeat_interval
                next_year = reminder.reminder_time.year + (next_month - 1) // 12
                next_month = ((next_month - 1) % 12) + 1
                
                next_time = reminder.reminder_time.replace(year=next_year, month=next_month)
            
            if next_time:
                new_reminder = Reminder(
                    child_id=reminder.child_id,
                    description=reminder.description,
                    reminder_time=next_time,
                    status='active',
                    repeat_type=reminder.repeat_type,
                    repeat_interval=reminder.repeat_interval
                )
                db.add(new_reminder)
        
        db.commit()
        
        await bot.answer_callback_query(callback_query.id, "‚è≠Ô∏è –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
        await show_reminders_list(callback_query)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–ø—É—Å–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")
        await bot.answer_callback_query(
            callback_query.id,
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–ø—É—Å–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"
        )
    finally:
        db.close()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
@dp.callback_query_handler(lambda c: c.data.startswith('reminder_delete_'))
async def delete_reminder(callback_query: types.CallbackQuery):
    """–£–¥–∞–ª–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
    reminder_id = int(callback_query.data.split('_')[2])
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f'reminder_delete_confirm_{reminder_id}'),
        InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f'reminder_view_{reminder_id}')
    )
    
    await bot.send_message(
        callback_query.from_user.id,
        "‚ùì *–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ?*\n\n"
        "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.",
        reply_markup=keyboard,
        parse_mode=ParseMode.MARKDOWN
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è
@dp.callback_query_handler(lambda c: c.data.startswith('reminder_delete_confirm_'))
async def confirm_delete_reminder(callback_query: types.CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
    reminder_id = int(callback_query.data.split('_')[3])
    
    db: Session = next(get_db())
    try:
        reminder = db.query(Reminder).get(reminder_id)
        if not reminder:
            await bot.answer_callback_query(callback_query.id, "‚ùå –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return
            
        # –£–¥–∞–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
        db.delete(reminder)
        db.commit()
        
        await bot.answer_callback_query(callback_query.id, "‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
        await show_reminders_list(callback_query)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")
        await bot.answer_callback_query(
            callback_query.id,
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"
        )
    finally:
        db.close()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
@dp.callback_query_handler(lambda c: c.data.startswith('reminder_edit_'))
async def edit_reminder(callback_query: types.CallbackQuery):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
    reminder_id = int(callback_query.data.split('_')[2])
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—ã–±–æ—Ä–æ–º –ø–æ–ª—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    keyboard = InlineKeyboardMarkup(row_width=1)
    keyboard.add(
        InlineKeyboardButton("üìù –ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ", callback_data=f'edit_description_{reminder_id}'),
        InlineKeyboardButton("‚è∞ –ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è", callback_data=f'edit_time_{reminder_id}'),
        InlineKeyboardButton("üîÑ –ò–∑–º–µ–Ω–∏—Ç—å —Ç–∏–ø –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è", callback_data=f'edit_repeat_type_{reminder_id}'),
        InlineKeyboardButton("üìä –ò–∑–º–µ–Ω–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è", callback_data=f'edit_repeat_interval_{reminder_id}'),
        InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f'reminder_view_{reminder_id}')
    )
    
    await bot.send_message(
        callback_query.from_user.id,
        "‚úèÔ∏è *–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è*\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:",
        reply_markup=keyboard,
        parse_mode=ParseMode.MARKDOWN
    )

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–æ–∫–∞–∑–∞ —Å–ø–∏—Å–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
from bot.bot import show_reminders_list 